2022-06-12 20:10:18 INFO logging.__new__ Created Logger singleton ID 4560435184
2022-06-12 20:11:54 INFO logging.__new__ Created Logger singleton ID 4453038208
2022-06-12 20:13:43 INFO logging.__new__ Created Logger singleton ID 4358289632
2022-06-12 20:13:43 INFO configuration.__new__ back_log: Created Configuration singleton 'Woohoo! exploding codeballs!' ID 4357523056
2022-06-12 20:13:43 INFO configuration.__new__ Loaded configuration from config.json
2022-06-12 20:13:44 INFO devices.<module> Logging is on, console output is: False
2022-06-12 20:13:44 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-12 20:13:44 INFO state.__new__ Created StateMachine singleton ID 4358289632
2022-06-12 20:13:44 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-12 20:13:44 INFO system.__new__ Created System singleton ID 4358289632
2022-06-12 20:13:44 INFO system.build Configuring 2 devices:
2022-06-12 20:13:44 INFO devices.__new__ Building {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-12 20:13:44 INFO devices.test Testing leftbutton
2022-06-12 20:13:44 INFO devices.sense_off GPIO6 is OFF
2022-06-12 20:13:46 INFO devices.sense_on GPIO6 is ON
2022-06-12 20:13:47 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-12 20:13:47 INFO devices.__new__ Building {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-12 20:13:47 INFO devices.test Testing rightbutton
2022-06-12 20:13:47 INFO devices.sense_off GPIO5 is OFF
2022-06-12 20:13:49 INFO devices.sense_on GPIO5 is ON
2022-06-12 20:13:50 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-12 20:16:48 INFO logging.__new__ Created Logger singleton ID 4520827104
2022-06-12 20:16:48 INFO configuration.__new__ back_log: Created Configuration singleton 'Woohoo! exploding codeballs!' ID 4520060528
2022-06-12 20:16:48 INFO configuration.__new__ Loaded configuration from config.json
2022-06-12 20:16:48 INFO devices.<module> Logging is on, console output is: False
2022-06-12 20:16:48 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-12 20:16:48 INFO state.__new__ Created StateMachine singleton ID 4520827104
2022-06-12 20:16:48 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-12 20:16:48 INFO system.__new__ Created System singleton ID 4520827104
2022-06-12 20:16:48 INFO system.build Configuring 2 devices:
2022-06-12 20:16:48 INFO devices.__new__ Building {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-12 20:16:48 INFO devices.test Testing leftbutton
2022-06-12 20:16:48 INFO devices.sense_off GPIO6 is OFF
2022-06-12 20:16:50 INFO devices.sense_on GPIO6 is ON
2022-06-12 20:16:51 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-12 20:16:51 INFO devices.__new__ Building {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-12 20:16:51 INFO devices.test Testing rightbutton
2022-06-12 20:16:51 INFO devices.sense_off GPIO5 is OFF
2022-06-12 20:16:54 INFO devices.sense_on GPIO5 is ON
2022-06-12 20:16:54 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-12 20:20:15 INFO logging.__new__ -------- NoiseBin --------
2022-06-12 20:20:15 INFO logging.__new__ Created Logger singleton ID 4397451488
2022-06-12 20:20:15 INFO configuration.__new__ back_log: Created Configuration singleton 'Woohoo! exploding codeballs!' ID 4396476016
2022-06-12 20:20:15 INFO configuration.__new__ Loaded configuration from config.json
2022-06-12 20:20:15 INFO devices.<module> Logging is on, console output is: False
2022-06-12 20:20:15 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-12 20:20:15 INFO state.__new__ Created StateMachine singleton ID 4397451488
2022-06-12 20:20:15 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-12 20:20:15 INFO system.__new__ Created System singleton ID 4397451488
2022-06-12 20:20:15 INFO system.build Configuring 2 devices:
2022-06-12 20:20:15 INFO devices.__new__ Building {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-12 20:20:15 INFO devices.test Testing leftbutton
2022-06-12 20:20:15 INFO devices.sense_off GPIO6 is OFF
2022-06-12 20:20:17 INFO devices.sense_on GPIO6 is ON
2022-06-12 20:20:18 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-12 20:20:18 INFO devices.__new__ Building {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-12 20:20:18 INFO devices.test Testing rightbutton
2022-06-12 20:20:18 INFO devices.sense_off GPIO5 is OFF
2022-06-12 20:20:20 INFO devices.sense_on GPIO5 is ON
2022-06-12 20:20:21 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-12 20:21:05 INFO logging.__new__ -------- NoiseBin --------
2022-06-12 20:21:05 INFO logging.__new__ Created Logger singleton ID 4319336672
2022-06-12 20:21:05 INFO configuration.__new__ back_log: Created Configuration singleton 'Woohoo! exploding codeballs!' ID 4318570096
2022-06-12 20:21:05 INFO configuration.__new__ Loaded configuration from config.json
2022-06-12 20:21:05 INFO devices.<module> Logging is on, console output is: False
2022-06-12 20:21:05 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-12 20:21:05 INFO state.__new__ Created StateMachine singleton ID 4319336672
2022-06-12 20:21:05 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-12 20:21:05 INFO system.__new__ Created System singleton ID 4319336672
2022-06-12 20:21:05 INFO system.build Configuring 2 devices:
2022-06-12 20:21:05 INFO devices.__new__ Building {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-12 20:21:05 INFO devices.test Testing leftbutton
2022-06-12 20:21:05 INFO devices.sense_off GPIO6 is OFF
2022-06-12 20:21:07 INFO devices.sense_on GPIO6 is ON
2022-06-12 20:21:08 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-12 20:21:08 INFO devices.__new__ Building {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-12 20:21:08 INFO devices.test Testing rightbutton
2022-06-12 20:21:09 INFO devices.sense_off GPIO5 is OFF
2022-06-12 20:21:11 INFO devices.sense_on GPIO5 is ON
2022-06-12 20:21:11 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-12 20:40:07 INFO logging.__new__ -------- NoiseBin --------
2022-06-12 20:40:07 INFO logging.__new__ Created Logger singleton ID 4491385008
2022-06-12 20:40:07 INFO configuration.__new__ backlog: Created Configuration singleton ID 4490618480
2022-06-12 20:40:07 INFO configuration.__new__ Loaded configuration from config.json
2022-06-12 20:41:14 INFO logging.__new__ -------- NoiseBin --------
2022-06-12 20:41:14 INFO logging.__new__ Created Logger singleton ID 4430641328
2022-06-12 20:41:14 INFO configuration.__new__ backlog: Created Configuration singleton ID 4429874800
2022-06-12 20:41:14 INFO configuration.__new__ Loaded configuration from config.json
2022-06-12 20:41:14 INFO devices.<module> Logging is on, console output is: False
2022-06-12 20:41:14 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-12 20:41:14 INFO state.__new__ Created StateMachine singleton ID 4430641328
2022-06-12 20:41:14 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-12 20:41:14 INFO system.__new__ Created System singleton ID 4430641328
2022-06-12 20:41:14 INFO system.build Configuring 2 devices:
2022-06-12 20:41:14 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-12 20:41:14 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-12 20:41:14 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-12 20:41:14 INFO devices.test Testing leftbutton
2022-06-12 20:41:15 INFO devices.sense_off GPIO6 is OFF
2022-06-12 20:41:17 INFO devices.sense_on GPIO6 is ON
2022-06-12 20:41:17 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-12 20:41:17 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-12 20:41:17 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-12 20:41:17 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-12 20:41:17 INFO devices.test Testing rightbutton
2022-06-12 20:41:18 INFO devices.sense_off GPIO5 is OFF
2022-06-12 20:41:20 INFO devices.sense_on GPIO5 is ON
2022-06-12 20:41:20 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-12 20:43:52 INFO logging.__new__ -------- NoiseBin --------
2022-06-12 20:43:52 INFO logging.__new__ Created Logger singleton ID 4505450672
2022-06-12 20:43:52 INFO configuration.__new__ backlog: Created Configuration singleton ID 4504684144
2022-06-12 20:43:52 INFO configuration.__new__ Loaded configuration from config.json
2022-06-12 20:43:52 INFO devices.<module> Logging is on, console output is: False
2022-06-12 20:43:52 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-12 20:43:52 INFO state.__new__ Created StateMachine singleton ID 4505450672
2022-06-12 20:43:52 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-12 20:43:52 INFO system.__new__ Created System singleton ID 4505450672
2022-06-12 20:43:52 INFO system.build Configuring 2 devices:
2022-06-12 20:43:52 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-12 20:43:52 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-12 20:43:52 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-12 20:43:52 INFO devices.test Testing leftbutton
2022-06-12 20:43:52 INFO devices.sense_off GPIO6 is OFF
2022-06-12 20:43:54 INFO devices.sense_on GPIO6 is ON
2022-06-12 20:43:55 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-12 20:43:55 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-12 20:43:55 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-12 20:43:55 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-12 20:43:55 INFO devices.test Testing rightbutton
2022-06-12 20:43:55 INFO devices.sense_off GPIO5 is OFF
2022-06-12 20:43:57 INFO devices.sense_on GPIO5 is ON
2022-06-12 20:43:58 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-12 20:44:34 INFO logging.__new__ -------- NoiseBin --------
2022-06-12 20:44:34 INFO logging.__new__ Created Logger singleton ID 4487387312
2022-06-12 20:44:34 INFO configuration.__new__ backlog: Created Configuration singleton ID 4486620784
2022-06-12 20:44:34 INFO configuration.__new__ Loaded configuration from config.json
2022-06-12 20:44:34 INFO devices.<module> Logging is on, console output is: False
2022-06-12 20:44:34 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-12 20:44:34 INFO state.__new__ Created StateMachine singleton ID 4487387312
2022-06-12 20:44:34 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-12 20:44:34 INFO system.__new__ Created System singleton ID 4487387312
2022-06-12 20:44:34 INFO system.build Configuring 2 devices:
2022-06-12 20:44:34 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-12 20:44:34 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-12 20:44:34 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-12 20:44:34 INFO devices.test Testing leftbutton
2022-06-12 20:44:35 INFO devices.sense_off GPIO6 is OFF
2022-06-12 20:44:37 INFO devices.sense_on GPIO6 is ON
2022-06-12 20:44:37 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-12 20:44:37 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-12 20:44:37 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-12 20:44:37 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-12 20:44:37 INFO devices.test Testing rightbutton
2022-06-12 20:44:38 INFO devices.sense_off GPIO5 is OFF
2022-06-12 20:44:40 INFO devices.sense_on GPIO5 is ON
2022-06-12 20:44:40 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-13 06:18:44 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:18:44 INFO logging.__new__ Created Logger singleton ID 4451727536
2022-06-13 06:18:44 INFO configuration.__new__ backlog: Created Configuration singleton ID 4450961008
2022-06-13 06:18:44 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:18:44 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:18:44 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:19:07 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:19:07 INFO logging.__new__ Created Logger singleton ID 4521564336
2022-06-13 06:19:07 INFO configuration.__new__ backlog: Created Configuration singleton ID 4520797808
2022-06-13 06:19:07 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:19:07 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:19:07 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:20:51 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:20:51 INFO logging.__new__ Created Logger singleton ID 4483594416
2022-06-13 06:20:51 INFO configuration.__new__ backlog: Created Configuration singleton ID 4482831984
2022-06-13 06:20:51 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:20:51 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:20:51 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:20:51 INFO state.__new__ Created StateMachine singleton ID 4483594416
2022-06-13 06:20:51 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:20:51 INFO system.__new__ Created System singleton ID 4483594416
2022-06-13 06:20:51 INFO system.build Configuring 2 devices:
2022-06-13 06:20:51 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:21:27 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:21:27 INFO logging.__new__ Created Logger singleton ID 4312590512
2022-06-13 06:21:27 INFO configuration.__new__ backlog: Created Configuration singleton ID 4311823984
2022-06-13 06:21:27 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:21:27 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:21:27 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:21:27 INFO state.__new__ Created StateMachine singleton ID 4312590512
2022-06-13 06:21:27 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:21:27 INFO system.__new__ Created System singleton ID 4312590512
2022-06-13 06:21:27 INFO system.build Configuring 2 devices:
2022-06-13 06:21:27 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:23:16 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:23:16 INFO logging.__new__ Created Logger singleton ID 4431571120
2022-06-13 06:23:16 INFO configuration.__new__ backlog: Created Configuration singleton ID 4430808688
2022-06-13 06:23:16 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:23:16 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:23:16 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:23:16 INFO state.__new__ Created StateMachine singleton ID 4431571120
2022-06-13 06:23:16 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:23:16 INFO system.__new__ Created System singleton ID 4431571120
2022-06-13 06:23:16 INFO system.build Configuring 2 devices:
2022-06-13 06:23:16 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:23:16 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:23:16 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:24:43 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:24:43 INFO logging.__new__ Created Logger singleton ID 4343818416
2022-06-13 06:24:43 INFO configuration.__new__ backlog: Created Configuration singleton ID 4343051888
2022-06-13 06:24:43 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:24:43 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:24:43 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:24:43 INFO state.__new__ Created StateMachine singleton ID 4343818416
2022-06-13 06:24:43 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:24:43 INFO system.__new__ Created System singleton ID 4343818416
2022-06-13 06:24:43 INFO system.build Configuring 2 devices:
2022-06-13 06:24:43 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:24:43 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:24:43 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:28:12 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:28:12 INFO logging.__new__ Created Logger singleton ID 4479744176
2022-06-13 06:28:12 INFO configuration.__new__ backlog: Created Configuration singleton ID 4478973552
2022-06-13 06:28:12 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:28:12 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:28:12 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:28:12 INFO state.__new__ Created StateMachine singleton ID 4479744176
2022-06-13 06:28:12 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:28:12 INFO system.__new__ Created System singleton ID 4479744176
2022-06-13 06:28:12 INFO system.build Configuring 2 devices:
2022-06-13 06:28:12 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:28:12 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:28:12 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:28:12 INFO system.build Obtained switch object ID 140339168422592
2022-06-13 06:29:04 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:29:04 INFO logging.__new__ Created Logger singleton ID 4486482096
2022-06-13 06:29:04 INFO configuration.__new__ backlog: Created Configuration singleton ID 4485715568
2022-06-13 06:29:04 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:29:04 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:29:04 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:29:04 INFO state.__new__ Created StateMachine singleton ID 4486482096
2022-06-13 06:29:04 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:29:04 INFO system.__new__ Created System singleton ID 4486482096
2022-06-13 06:29:04 INFO system.build Configuring 2 devices:
2022-06-13 06:29:04 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:29:04 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:29:04 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:29:04 INFO system.build Obtained switch object ID 140658825588080 containing ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'context', 'driver', 'sense_off', 'sense_on', 'test']
2022-06-13 06:31:37 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:31:37 INFO logging.__new__ Created Logger singleton ID 4362664112
2022-06-13 06:31:37 INFO configuration.__new__ backlog: Created Configuration singleton ID 4361897584
2022-06-13 06:31:37 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:31:37 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:31:37 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:31:37 INFO state.__new__ Created StateMachine singleton ID 4362664112
2022-06-13 06:31:37 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:31:37 INFO system.__new__ Created System singleton ID 4362664112
2022-06-13 06:31:37 INFO system.build Configuring 2 devices:
2022-06-13 06:31:37 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:31:37 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:31:37 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:31:37 INFO system.build Obtained switch object ID 140522808538880 containing ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'context', 'driver', 'sense_off', 'sense_on', 'test']
2022-06-13 06:31:37 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-13 06:31:37 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:31:37 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:31:37 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:31:37 INFO system.build Obtained switch object ID 140522808538880 containing ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'context', 'driver', 'sense_off', 'sense_on', 'test']
2022-06-13 06:31:37 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-13 06:32:15 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:32:15 INFO logging.__new__ Created Logger singleton ID 4397000880
2022-06-13 06:32:15 INFO configuration.__new__ backlog: Created Configuration singleton ID 4396230256
2022-06-13 06:32:15 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:32:15 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:32:15 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:32:15 INFO state.__new__ Created StateMachine singleton ID 4397000880
2022-06-13 06:32:15 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:32:15 INFO system.__new__ Created System singleton ID 4397000880
2022-06-13 06:32:15 INFO system.build Configuring 2 devices:
2022-06-13 06:32:15 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:32:15 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:32:15 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:32:53 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:32:53 INFO logging.__new__ Created Logger singleton ID 4556908720
2022-06-13 06:32:53 INFO configuration.__new__ backlog: Created Configuration singleton ID 4556142192
2022-06-13 06:32:53 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:32:53 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:32:53 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:32:53 INFO state.__new__ Created StateMachine singleton ID 4556908720
2022-06-13 06:32:53 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:32:53 INFO system.__new__ Created System singleton ID 4556908720
2022-06-13 06:32:53 INFO system.build Configuring 2 devices:
2022-06-13 06:32:53 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:32:53 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:32:53 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:33:03 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:33:03 INFO logging.__new__ Created Logger singleton ID 4389509296
2022-06-13 06:33:03 INFO configuration.__new__ backlog: Created Configuration singleton ID 4388742768
2022-06-13 06:33:03 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:33:03 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:33:03 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:33:03 INFO state.__new__ Created StateMachine singleton ID 4389509296
2022-06-13 06:33:03 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:33:03 INFO system.__new__ Created System singleton ID 4389509296
2022-06-13 06:33:03 INFO system.build Configuring 2 devices:
2022-06-13 06:33:03 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:33:03 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:33:03 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:33:03 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-13 06:33:03 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:33:03 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:33:03 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:33:03 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-13 06:34:15 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:34:15 INFO logging.__new__ Created Logger singleton ID 4371302576
2022-06-13 06:34:15 INFO configuration.__new__ backlog: Created Configuration singleton ID 4370536048
2022-06-13 06:34:15 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:34:15 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:34:15 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:34:15 INFO state.__new__ Created StateMachine singleton ID 4371302576
2022-06-13 06:34:15 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:34:15 INFO system.__new__ Created System singleton ID 4371302576
2022-06-13 06:34:15 INFO system.build Configuring 2 devices:
2022-06-13 06:34:15 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:34:15 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:34:15 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:34:15 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-13 06:34:15 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:34:15 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:34:15 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:34:15 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-13 06:35:11 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:35:11 INFO logging.__new__ Created Logger singleton ID 4530034864
2022-06-13 06:35:11 INFO configuration.__new__ backlog: Created Configuration singleton ID 4529268336
2022-06-13 06:35:11 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:35:11 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:35:11 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:35:11 INFO state.__new__ Created StateMachine singleton ID 4530034864
2022-06-13 06:35:11 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:35:11 INFO system.__new__ Created System singleton ID 4530034864
2022-06-13 06:35:11 INFO system.build Configuring 2 devices:
2022-06-13 06:35:11 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:35:11 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:35:11 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:35:11 INFO system.build Obtained switch object ID 140195885671744 containing ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'context', 'driver', 'sense_off', 'sense_on', 'test']
2022-06-13 06:35:11 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-13 06:35:11 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:35:11 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:35:11 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:35:11 INFO system.build Obtained switch object ID 140195885671744 containing ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'context', 'driver', 'sense_off', 'sense_on', 'test']
2022-06-13 06:35:11 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-13 06:37:44 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:37:44 INFO logging.__new__ Created Logger singleton ID 4412885168
2022-06-13 06:37:44 INFO configuration.__new__ backlog: Created Configuration singleton ID 4412118640
2022-06-13 06:37:44 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:37:44 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:37:44 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:37:44 INFO state.__new__ Created StateMachine singleton ID 4412885168
2022-06-13 06:37:44 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:37:44 INFO system.__new__ Created System singleton ID 4412885168
2022-06-13 06:37:44 INFO system.build Configuring 2 devices:
2022-06-13 06:37:44 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:37:44 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:37:44 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:38:23 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:38:23 INFO logging.__new__ Created Logger singleton ID 4424165552
2022-06-13 06:38:23 INFO configuration.__new__ backlog: Created Configuration singleton ID 4423399024
2022-06-13 06:38:23 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:38:40 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:38:40 INFO logging.__new__ Created Logger singleton ID 4516497584
2022-06-13 06:38:40 INFO configuration.__new__ backlog: Created Configuration singleton ID 4515731056
2022-06-13 06:38:40 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:38:40 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:38:40 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:38:40 INFO state.__new__ Created StateMachine singleton ID 4516497584
2022-06-13 06:38:40 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:38:40 INFO system.__new__ Created System singleton ID 4516497584
2022-06-13 06:38:40 INFO system.build Configuring 2 devices:
2022-06-13 06:38:40 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:38:40 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:38:40 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:38:40 INFO system.build Switch leftbutton has driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:38:40 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-13 06:38:40 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:38:40 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:38:40 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:38:40 INFO system.build Switch rightbutton has driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:38:40 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-13 06:39:26 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:39:26 INFO logging.__new__ Created Logger singleton ID 4432894128
2022-06-13 06:39:26 INFO configuration.__new__ backlog: Created Configuration singleton ID 4432123504
2022-06-13 06:39:26 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:39:26 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:39:26 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:39:26 INFO state.__new__ Created StateMachine singleton ID 4432894128
2022-06-13 06:39:26 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:39:26 INFO system.__new__ Created System singleton ID 4432894128
2022-06-13 06:39:26 INFO system.build Configuring 2 devices:
2022-06-13 06:39:26 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:39:26 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:39:26 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:39:26 INFO system.build Switch leftbutton ID 140605850841920 has driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:39:26 INFO system.build 'Commissioned a switch named leftbutton'
2022-06-13 06:39:26 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:39:26 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:39:26 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:39:26 INFO system.build Switch rightbutton ID 140605850841920 has driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:39:26 INFO system.build 'Commissioned a switch named rightbutton'
2022-06-13 06:42:23 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:42:23 INFO logging.__new__ Created Logger singleton ID 4318140592
2022-06-13 06:42:23 INFO configuration.__new__ backlog: Created Configuration singleton ID 4317374064
2022-06-13 06:42:23 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:42:23 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:42:23 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:42:24 INFO state.__new__ Created StateMachine singleton ID 4318140592
2022-06-13 06:42:24 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:42:24 INFO system.__new__ Created System singleton ID 4318140592
2022-06-13 06:42:24 INFO system.build Configuring 2 devices:
2022-06-13 06:42:24 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:42:24 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:42:24 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:42:24 INFO system.build Commissioned Switch leftbutton ID 140450982896144 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:42:24 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:42:24 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:42:24 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:42:24 INFO system.build Commissioned Switch rightbutton ID 140450982896144 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:44:15 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:44:15 INFO logging.__new__ Created Logger singleton ID 4460988592
2022-06-13 06:44:15 INFO configuration.__new__ backlog: Created Configuration singleton ID 4460222064
2022-06-13 06:44:15 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:44:15 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:44:15 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:44:15 INFO state.__new__ Created StateMachine singleton ID 4460988592
2022-06-13 06:44:15 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:44:15 INFO system.__new__ Created System singleton ID 4460988592
2022-06-13 06:44:15 INFO system.build Configuring 2 devices:
2022-06-13 06:44:15 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:44:15 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:44:15 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:44:15 INFO system.build Commissioned Switch leftbutton ID 140504657618784 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:44:15 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:44:15 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:44:15 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:44:15 INFO system.build Commissioned Switch rightbutton ID 140504657618784 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:46:33 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:46:33 INFO logging.__new__ Created Logger singleton ID 4332919296
2022-06-13 06:46:33 INFO configuration.__new__ backlog: Created Configuration singleton ID 4332124432
2022-06-13 06:46:33 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:46:33 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:46:33 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:46:33 INFO state.__new__ Created StateMachine singleton ID 4332919296
2022-06-13 06:46:33 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:46:33 INFO system.__new__ Created System singleton ID 4332919296
2022-06-13 06:46:33 INFO system.build Configuring 2 devices:
2022-06-13 06:46:33 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:46:33 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:46:33 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:46:33 INFO system.build Commissioned Switch leftbutton ID 140355743280064 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:46:33 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:46:33 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:46:33 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:46:33 INFO system.build Commissioned Switch rightbutton ID 140355743280064 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:47:28 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:47:28 INFO logging.__new__ Created Logger singleton ID 4563749424
2022-06-13 06:47:28 INFO configuration.__new__ backlog: Created Configuration singleton ID 4562954608
2022-06-13 06:47:28 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:47:28 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:47:28 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:47:28 INFO state.__new__ Created StateMachine singleton ID 4563749424
2022-06-13 06:47:28 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:47:28 INFO system.__new__ Created System singleton ID 4563749424
2022-06-13 06:47:28 INFO system.build Configuring 2 devices:
2022-06-13 06:47:28 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:47:28 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:47:28 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:47:28 INFO system.build Commissioned Switch leftbutton ID 140277832875280 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:47:28 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:47:28 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:47:28 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:47:28 INFO system.build Commissioned Switch rightbutton ID 140277832875280 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:48:01 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:48:01 INFO logging.__new__ Created Logger singleton ID 4372847392
2022-06-13 06:48:01 INFO configuration.__new__ backlog: Created Configuration singleton ID 4372048480
2022-06-13 06:48:01 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:48:02 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:48:02 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:48:02 INFO state.__new__ Created StateMachine singleton ID 4372847392
2022-06-13 06:48:02 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:48:02 INFO system.__new__ Created System singleton ID 4372847392
2022-06-13 06:48:02 INFO system.build Configuring 2 devices:
2022-06-13 06:48:02 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:48:02 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:48:02 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:48:02 INFO system.build Commissioned Switch leftbutton ID 140438896431248 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:48:02 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:48:02 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:48:02 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:48:02 INFO system.build Commissioned Switch rightbutton ID 140438896431248 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:48:55 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:48:55 INFO logging.__new__ Created Logger singleton ID 4517706528
2022-06-13 06:48:55 INFO configuration.__new__ backlog: Created Configuration singleton ID 4516911712
2022-06-13 06:48:55 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:48:55 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:48:55 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:48:55 INFO state.__new__ Created StateMachine singleton ID 4517706528
2022-06-13 06:48:55 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:48:55 INFO system.__new__ Created System singleton ID 4517706528
2022-06-13 06:48:55 INFO system.build Configuring 2 devices:
2022-06-13 06:48:55 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:48:55 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:48:55 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:48:55 INFO system.build Commissioned Switch leftbutton ID 140460389799008 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:48:55 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:48:55 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:48:55 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:48:55 INFO system.build Commissioned Switch rightbutton ID 140460389799008 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:51:53 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:51:53 INFO logging.__new__ Created Logger singleton ID 4527378336
2022-06-13 06:51:53 INFO configuration.__new__ backlog: Created Configuration singleton ID 4526656192
2022-06-13 06:51:53 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:51:53 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:51:53 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:51:53 INFO state.__new__ Created StateMachine singleton ID 4527378336
2022-06-13 06:51:53 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:51:53 INFO system.__new__ Created System singleton ID 4527378336
2022-06-13 06:51:53 INFO system.build Configuring 2 devices:
2022-06-13 06:51:53 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:51:53 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:51:53 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:51:53 INFO system.build Commissioned Switch leftbutton ID 140613148591888 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:52:42 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:52:42 INFO logging.__new__ Created Logger singleton ID 4311424928
2022-06-13 06:52:42 INFO configuration.__new__ backlog: Created Configuration singleton ID 4310702784
2022-06-13 06:52:42 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:52:42 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:52:42 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:52:42 INFO state.__new__ Created StateMachine singleton ID 4311424928
2022-06-13 06:52:42 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:52:42 INFO system.__new__ Created System singleton ID 4311424928
2022-06-13 06:52:42 INFO system.build Configuring 2 devices:
2022-06-13 06:52:42 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:52:42 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:52:42 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:52:42 INFO system.build Commissioned Switch leftbutton ID 140596861271296 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:52:42 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:52:42 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:52:42 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:52:42 INFO system.build Commissioned Switch rightbutton ID 140596861271296 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:55:56 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 06:55:56 INFO logging.__new__ Created Logger singleton ID 4562258384
2022-06-13 06:55:56 INFO configuration.__new__ backlog: Created Configuration singleton ID 4566667168
2022-06-13 06:55:56 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 06:55:56 INFO devices.<module> Logging is on, console output is: False
2022-06-13 06:55:56 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 06:55:56 INFO state.__new__ Created StateMachine singleton ID 4562258384
2022-06-13 06:55:56 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 06:55:56 INFO system.__new__ Created System singleton ID 4562258384
2022-06-13 06:55:56 INFO system.build Configuring 2 devices:
2022-06-13 06:55:56 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 06:55:56 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:55:56 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:55:56 INFO system.build Commissioned Switch leftbutton ID 140656727213504 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 06:55:56 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 06:55:56 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:55:56 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 06:55:56 INFO system.build Commissioned Switch rightbutton ID 140656727213504 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:04:38 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:04:38 INFO logging.__new__ Created Logger singleton ID 4367247824
2022-06-13 08:04:38 INFO configuration.__new__ backlog: Created Configuration singleton ID 4371656608
2022-06-13 08:04:38 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:04:38 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:04:38 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:04:38 INFO state.__new__ Created StateMachine singleton ID 4367247824
2022-06-13 08:04:38 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:04:38 INFO system.__new__ Created System singleton ID 4367247824
2022-06-13 08:04:38 INFO system.build Configuring 2 devices:
2022-06-13 08:04:38 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:04:38 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:04:38 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:04:38 INFO system.build Commissioned Switch leftbutton ID 140179872000032 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:04:38 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:04:38 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:04:38 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:04:38 INFO system.build Commissioned Switch rightbutton ID 140179872000032 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:05:52 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:05:52 INFO logging.__new__ Created Logger singleton ID 4416883152
2022-06-13 08:05:52 INFO configuration.__new__ backlog: Created Configuration singleton ID 4421291936
2022-06-13 08:05:52 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:05:52 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:05:52 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:05:52 INFO state.__new__ Created StateMachine singleton ID 4416883152
2022-06-13 08:05:52 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:05:52 INFO system.__new__ Created System singleton ID 4416883152
2022-06-13 08:05:52 INFO system.build Configuring 2 devices:
2022-06-13 08:05:52 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:05:52 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:05:52 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:05:52 INFO system.build Commissioned Switch leftbutton ID 140313393196688 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:05:52 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:05:52 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:05:52 INFO devices.__new__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:05:52 INFO system.build Commissioned Switch rightbutton ID 140313393196688 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:08:32 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:08:32 INFO logging.__new__ Created Logger singleton ID 4402096592
2022-06-13 08:08:32 INFO configuration.__new__ backlog: Created Configuration singleton ID 4406505376
2022-06-13 08:08:32 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:08:32 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:08:32 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:08:32 INFO state.__new__ Created StateMachine singleton ID 4402096592
2022-06-13 08:08:32 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:08:32 INFO system.__new__ Created System singleton ID 4402096592
2022-06-13 08:08:32 INFO system.build Configuring 2 devices:
2022-06-13 08:08:32 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:08:32 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:08:32 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:09:29 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:09:29 INFO logging.__new__ Created Logger singleton ID 4304411088
2022-06-13 08:09:29 INFO configuration.__new__ backlog: Created Configuration singleton ID 4305870752
2022-06-13 08:09:29 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:09:29 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:09:29 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:09:30 INFO state.__new__ Created StateMachine singleton ID 4304411088
2022-06-13 08:09:30 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:09:30 INFO system.__new__ Created System singleton ID 4304411088
2022-06-13 08:09:30 INFO system.build Configuring 2 devices:
2022-06-13 08:09:30 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:09:30 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:09:30 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:14:10 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:14:10 INFO logging.__new__ Created Logger singleton ID 4299909584
2022-06-13 08:14:10 INFO configuration.__new__ backlog: Created Configuration singleton ID 4304318368
2022-06-13 08:14:10 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:14:10 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:14:10 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:14:11 INFO state.__new__ Created StateMachine singleton ID 4299909584
2022-06-13 08:14:11 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:14:11 INFO system.__new__ Created System singleton ID 4299909584
2022-06-13 08:14:11 INFO system.build Configuring 2 devices:
2022-06-13 08:14:11 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'not-a-button', 'gpio': 13}
2022-06-13 08:14:11 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO13, pull_up=False>
2022-06-13 08:14:11 INFO devices.__new__ Driver not-a-button is: <gpiozero.LineSensor object on pin GPIO13, pull_up=False>
2022-06-13 08:14:11 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'not-a-button', 'gpio': 13}
2022-06-13 08:15:24 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:15:24 INFO logging.__new__ Created Logger singleton ID 4404902352
2022-06-13 08:15:24 INFO configuration.__new__ backlog: Created Configuration singleton ID 4409311136
2022-06-13 08:15:24 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:15:24 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:15:24 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:15:25 INFO state.__new__ Created StateMachine singleton ID 4404902352
2022-06-13 08:15:25 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:15:25 INFO system.__new__ Created System singleton ID 4404902352
2022-06-13 08:15:25 INFO system.build Configuring 2 devices:
2022-06-13 08:15:25 INFO devices.__new__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:15:25 INFO devices.__new__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:15:25 INFO devices.__new__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:15:46 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:15:46 INFO logging.__new__ Created Logger singleton ID 4359723472
2022-06-13 08:15:46 INFO configuration.__new__ backlog: Created Configuration singleton ID 4364914592
2022-06-13 08:15:46 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:15:46 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:15:46 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:15:46 INFO state.__new__ Created StateMachine singleton ID 4359723472
2022-06-13 08:15:46 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:15:46 INFO system.__new__ Created System singleton ID 4359723472
2022-06-13 08:15:46 INFO system.build Configuring 2 devices:
2022-06-13 08:15:46 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:15:46 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:15:46 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:16:21 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:16:21 INFO logging.__new__ Created Logger singleton ID 4348963280
2022-06-13 08:16:21 INFO configuration.__new__ backlog: Created Configuration singleton ID 4353372064
2022-06-13 08:16:21 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:16:21 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:16:21 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:16:22 INFO state.__new__ Created StateMachine singleton ID 4348963280
2022-06-13 08:16:22 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:16:22 INFO system.__new__ Created System singleton ID 4348963280
2022-06-13 08:16:22 INFO system.build Configuring 2 devices:
2022-06-13 08:16:22 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:16:22 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:16:22 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:16:22 INFO system.build Commissioned Switch leftbutton ID 4348518112 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:16:22 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:16:22 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:16:22 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:16:22 INFO system.build Commissioned Switch rightbutton ID 4362516752 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:16:47 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:16:47 INFO logging.__new__ Created Logger singleton ID 4441860560
2022-06-13 08:16:47 INFO configuration.__new__ backlog: Created Configuration singleton ID 4446269344
2022-06-13 08:16:47 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:16:47 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:16:47 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:16:47 INFO state.__new__ Created StateMachine singleton ID 4441860560
2022-06-13 08:16:47 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:16:47 INFO system.__new__ Created System singleton ID 4441860560
2022-06-13 08:16:47 INFO system.build Configuring 2 devices:
2022-06-13 08:16:47 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:16:47 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:16:47 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:16:47 INFO system.build Commissioned Switch leftbutton ID 4441415392 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:16:47 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:16:47 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:16:47 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:16:47 INFO system.build Commissioned Switch rightbutton ID 4455414032 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:30:09 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:30:09 INFO logging.__new__ Created Logger singleton ID 4381432272
2022-06-13 08:30:09 INFO configuration.__new__ backlog: Created Configuration singleton ID 4385841056
2022-06-13 08:30:09 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:30:09 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:30:09 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:30:09 INFO state.__new__ Created StateMachine singleton ID 4381432272
2022-06-13 08:30:09 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:30:09 INFO system.__new__ Created System singleton ID 4381432272
2022-06-13 08:30:09 INFO system.build Configuring 2 devices:
2022-06-13 08:30:09 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:30:09 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:30:09 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:30:09 INFO system.build Commissioned Switch leftbutton ID 4380987104 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:30:09 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:30:09 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:30:09 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:30:09 INFO system.build Commissioned Switch rightbutton ID 4394985744 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:31:17 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:31:17 INFO logging.__new__ Created Logger singleton ID 4305633184
2022-06-13 08:31:17 INFO configuration.__new__ backlog: Created Configuration singleton ID 4304911040
2022-06-13 08:31:17 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:31:17 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:31:17 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:31:17 INFO state.__new__ Created StateMachine singleton ID 4305633184
2022-06-13 08:31:17 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:31:17 INFO system.__new__ Created System singleton ID 4305633184
2022-06-13 08:31:17 INFO system.build Configuring 2 devices:
2022-06-13 08:31:17 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:31:17 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:31:17 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:31:17 INFO system.build Commissioned Switch leftbutton ID 4299894400 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:31:17 INFO devices.test Testing leftbutton
2022-06-13 08:31:20 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:31:20 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:31:20 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:31:20 INFO system.build Commissioned Switch rightbutton ID 4305747536 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:31:20 INFO devices.test Testing rightbutton
2022-06-13 08:34:49 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:34:49 INFO logging.__new__ Created Logger singleton ID 4409741216
2022-06-13 08:34:49 INFO configuration.__new__ backlog: Created Configuration singleton ID 4409019072
2022-06-13 08:34:49 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:34:49 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:34:49 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:34:49 INFO state.__new__ Created StateMachine singleton ID 4409741216
2022-06-13 08:34:49 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:34:49 INFO system.__new__ Created System singleton ID 4409741216
2022-06-13 08:34:49 INFO system.build Configuring 2 devices:
2022-06-13 08:34:49 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:34:49 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:34:49 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:34:49 INFO devices.__init__ Driver consists of [('__attrs__',
  frozenset({'__class__',
             '__del__',
             '__delattr__',
             '__dict__',
             '__dir__',
             '__doc__',
             '__enter__',
             '__eq__',
             '__exit__',
             '__format__',
             '__ge__',
             '__getattribute__',
             '__gt__',
             '__hash__',
             '__init__',
             '__init_subclass__',
             '__le__',
             '__lt__',
             '__module__',
             '__ne__',
             '__new__',
             '__reduce__',
             '__reduce_ex__',
             '__repr__',
             '__setattr__',
             '__sizeof__',
             '__str__',
             '__subclasshook__',
             '__weakref__',
             '_active_event',
             '_active_state',
             '_all_events',
             '_check_open',
             '_conflicts_with',
             '_default_pin_factory',
             '_fire_activated',
             '_fire_deactivated',
             '_fire_events',
             '_inactive_event',
             '_inactive_state',
             '_last_active',
             '_last_changed',
             '_pin',
             '_queue',
             '_read',
             '_start_stop_events',
             '_state_to_value',
             '_threshold',
             '_wrap_callback',
             'active_time',
             'close',
             'closed',
             'inactive_time',
             'is_active',
             'line_detected',
             'partial',
             'pin',
             'pin_factory',
             'pull_up',
             'queue_len',
             'threshold',
             'value',
             'values',
             'wait_for_active',
             'wait_for_inactive',
             'wait_for_line',
             'wait_for_no_line',
             'when_activated',
             'when_deactivated',
             'when_line',
             'when_no_line'})),
 ('__class__', <class 'gpiozero.input_devices.LineSensor'>),
 ('__del__',
  <bound method GPIOBase.__del__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__delattr__',
  <method-wrapper '__delattr__' of LineSensor object at 0x1076390d0>),
 ('__dict__',
  {'__attrs__': frozenset({'__class__',
                           '__del__',
                           '__delattr__',
                           '__dict__',
                           '__dir__',
                           '__doc__',
                           '__enter__',
                           '__eq__',
                           '__exit__',
                           '__format__',
                           '__ge__',
                           '__getattribute__',
                           '__gt__',
                           '__hash__',
                           '__init__',
                           '__init_subclass__',
                           '__le__',
                           '__lt__',
                           '__module__',
                           '__ne__',
                           '__new__',
                           '__reduce__',
                           '__reduce_ex__',
                           '__repr__',
                           '__setattr__',
                           '__sizeof__',
                           '__str__',
                           '__subclasshook__',
                           '__weakref__',
                           '_active_event',
                           '_active_state',
                           '_all_events',
                           '_check_open',
                           '_conflicts_with',
                           '_default_pin_factory',
                           '_fire_activated',
                           '_fire_deactivated',
                           '_fire_events',
                           '_inactive_event',
                           '_inactive_state',
                           '_last_active',
                           '_last_changed',
                           '_pin',
                           '_queue',
                           '_read',
                           '_start_stop_events',
                           '_state_to_value',
                           '_threshold',
                           '_wrap_callback',
                           'active_time',
                           'close',
                           'closed',
                           'inactive_time',
                           'is_active',
                           'line_detected',
                           'partial',
                           'pin',
                           'pin_factory',
                           'pull_up',
                           'queue_len',
                           'threshold',
                           'value',
                           'values',
                           'wait_for_active',
                           'wait_for_inactive',
                           'wait_for_line',
                           'wait_for_no_line',
                           'when_activated',
                           'when_deactivated',
                           'when_line',
                           'when_no_line'}),
   '_active_event': <threading.Event object at 0x107639130>,
   '_active_state': True,
   '_inactive_event': <threading.Event object at 0x107639550>,
   '_inactive_state': False,
   '_last_active': False,
   '_last_changed': 0.215083178,
   '_pin': GPIO6,
   '_queue': <GPIOQueue(Thread-1, started daemon 123145341530112)>,
   '_threshold': 0.5,
   'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x106cc4df0>}),
 ('__dir__', <built-in method __dir__ of LineSensor object at 0x1076390d0>),
 ('__doc__',
  '\n'
  '    Extends :class:`SmoothedInputDevice` and represents a single pin line\n'
  '    sensor like the TCRT5000 infra-red proximity sensor found in the '
  '`CamJam #3\n'
  '    EduKit`_.\n'
  '\n'
  '    A typical line sensor has a small circuit board with three pins: VCC, '
  'GND,\n'
  '    and OUT. VCC should be connected to a 3V3 pin, GND to one of the '
  'ground\n'
  '    pins, and finally OUT to the GPIO specified as the value of the *pin*\n'
  '    parameter in the constructor.\n'
  '\n'
  '    The following code will print a line of text indicating when the '
  'sensor\n'
  '    detects a line, or stops detecting a line::\n'
  '\n'
  '        from gpiozero import LineSensor\n'
  '        from signal import pause\n'
  '\n'
  '        sensor = LineSensor(4)\n'
  "        sensor.when_line = lambda: print('Line detected')\n"
  "        sensor.when_no_line = lambda: print('No line detected')\n"
  '        pause()\n'
  '\n'
  '    :type pin: int or str\n'
  '    :param pin:\n'
  '        The GPIO pin which the sensor is connected to. See '
  ':ref:`pin-numbering`\n'
  '        for valid pin numbers. If this is :data:`None` a '
  ':exc:`GPIODeviceError`\n'
  '        will be raised.\n'
  '\n'
  '    :type pull_up: bool or None\n'
  '    :param pull_up:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :type active_state: bool or None\n'
  '    :param active_state:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :param int queue_len:\n'
  '        The length of the queue used to store values read from the sensor. '
  'This\n'
  '        defaults to 5.\n'
  '\n'
  '    :param float sample_rate:\n'
  '        The number of values to read from the device (and append to the\n'
  '        internal queue) per second. Defaults to 100.\n'
  '\n'
  '    :param float threshold:\n'
  '        Defaults to 0.5. When the average of all values in the internal '
  'queue\n'
  '        rises above this value, the sensor will be considered "active" by '
  'the\n'
  '        :attr:`~SmoothedInputDevice.is_active` property, and all '
  'appropriate\n'
  '        events will be fired.\n'
  '\n'
  '    :param bool partial:\n'
  '        When :data:`False` (the default), the object will not return a '
  'value\n'
  '        for :attr:`~SmoothedInputDevice.is_active` until the internal queue '
  'has\n'
  '        filled with values.  Only set this to :data:`True` if you require\n'
  '        values immediately after object construction.\n'
  '\n'
  '    :type pin_factory: Factory or None\n'
  '    :param pin_factory:\n'
  '        See :doc:`api_pins` for more information (this is an advanced '
  'feature\n'
  '        which most users can ignore).\n'
  '\n'
  '    .. _CamJam #3 EduKit: http://camjam.me/?page_id=1035\n'
  '    '),
 ('__enter__',
  <bound method GPIOBase.__enter__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__eq__', <method-wrapper '__eq__' of LineSensor object at 0x1076390d0>),
 ('__exit__',
  <bound method GPIOBase.__exit__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__format__',
  <built-in method __format__ of LineSensor object at 0x1076390d0>),
 ('__ge__', <method-wrapper '__ge__' of LineSensor object at 0x1076390d0>),
 ('__getattribute__',
  <method-wrapper '__getattribute__' of LineSensor object at 0x1076390d0>),
 ('__gt__', <method-wrapper '__gt__' of LineSensor object at 0x1076390d0>),
 ('__hash__', <method-wrapper '__hash__' of LineSensor object at 0x1076390d0>),
 ('__init__',
  <bound method LineSensor.__init__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__init_subclass__',
  <built-in method __init_subclass__ of GPIOMeta object at 0x7f9e9da72d30>),
 ('__le__', <method-wrapper '__le__' of LineSensor object at 0x1076390d0>),
 ('__lt__', <method-wrapper '__lt__' of LineSensor object at 0x1076390d0>),
 ('__module__', 'gpiozero.input_devices'),
 ('__ne__', <method-wrapper '__ne__' of LineSensor object at 0x1076390d0>),
 ('__new__', <built-in method __new__ of type object at 0x106b988a8>),
 ('__reduce__',
  <built-in method __reduce__ of LineSensor object at 0x1076390d0>),
 ('__reduce_ex__',
  <built-in method __reduce_ex__ of LineSensor object at 0x1076390d0>),
 ('__repr__',
  <bound method SmoothedInputDevice.__repr__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__setattr__',
  <bound method GPIOBase.__setattr__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__sizeof__',
  <built-in method __sizeof__ of LineSensor object at 0x1076390d0>),
 ('__str__', <method-wrapper '__str__' of LineSensor object at 0x1076390d0>),
 ('__subclasshook__',
  <built-in method __subclasshook__ of GPIOMeta object at 0x7f9e9da72d30>),
 ('__weakref__', <weakref at 0x106cdf4f0; to 'LineSensor' at 0x1076390d0>),
 ('_active_event', <threading.Event object at 0x107639130>),
 ('_active_state', True),
 ('_all_events',
  <bound method EventsMixin._all_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_check_open',
  <bound method GPIODevice._check_open of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_conflicts_with',
  <bound method Device._conflicts_with of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_default_pin_factory',
  <function Device._default_pin_factory at 0x10702bca0>),
 ('_fire_activated',
  <bound method EventsMixin._fire_activated of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_fire_deactivated',
  <bound method EventsMixin._fire_deactivated of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_fire_events',
  <bound method EventsMixin._fire_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_inactive_event', <threading.Event object at 0x107639550>),
 ('_inactive_state', False),
 ('_last_active', None),
 ('_last_changed', 0.215083178),
 ('_pin', GPIO6),
 ('_queue', <GPIOQueue(Thread-1, started daemon 123145341530112)>),
 ('_read',
  <bound method GPIODevice._read of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_start_stop_events',
  <bound method EventsMixin._start_stop_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_state_to_value',
  <bound method GPIODevice._state_to_value of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_threshold', 0.5),
 ('_wrap_callback',
  <bound method EventsMixin._wrap_callback of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('active_time', None),
 ('close',
  <bound method SmoothedInputDevice.close of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('closed', False),
 ('inactive_time', None),
 ('is_active', False),
 ('line_detected', True),
 ('partial', False),
 ('pin', GPIO6),
 ('pin_factory', <gpiozero.pins.mock.MockFactory object at 0x106cc4df0>),
 ('pull_up', False),
 ('queue_len', 5),
 ('threshold', 0.5),
 ('value', 0),
 ('values', <generator object ValuesMixin.values at 0x1071d6430>),
 ('wait_for_active',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_inactive',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_line',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_no_line',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('when_activated',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x1067fce80>>),
 ('when_deactivated',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x1067fce80>>),
 ('when_line',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x1067fce80>>),
 ('when_no_line',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x1067fce80>>)]
2022-06-13 08:34:49 INFO system.build Commissioned Switch leftbutton ID 4404006528 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>
2022-06-13 08:34:49 INFO devices.test Testing leftbutton
2022-06-13 08:34:52 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:34:52 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:34:52 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:34:52 INFO devices.__init__ Driver consists of [('__attrs__',
  frozenset({'__class__',
             '__del__',
             '__delattr__',
             '__dict__',
             '__dir__',
             '__doc__',
             '__enter__',
             '__eq__',
             '__exit__',
             '__format__',
             '__ge__',
             '__getattribute__',
             '__gt__',
             '__hash__',
             '__init__',
             '__init_subclass__',
             '__le__',
             '__lt__',
             '__module__',
             '__ne__',
             '__new__',
             '__reduce__',
             '__reduce_ex__',
             '__repr__',
             '__setattr__',
             '__sizeof__',
             '__str__',
             '__subclasshook__',
             '__weakref__',
             '_active_event',
             '_active_state',
             '_all_events',
             '_check_open',
             '_conflicts_with',
             '_default_pin_factory',
             '_fire_activated',
             '_fire_deactivated',
             '_fire_events',
             '_inactive_event',
             '_inactive_state',
             '_last_active',
             '_last_changed',
             '_pin',
             '_queue',
             '_read',
             '_start_stop_events',
             '_state_to_value',
             '_threshold',
             '_wrap_callback',
             'active_time',
             'close',
             'closed',
             'inactive_time',
             'is_active',
             'line_detected',
             'partial',
             'pin',
             'pin_factory',
             'pull_up',
             'queue_len',
             'threshold',
             'value',
             'values',
             'wait_for_active',
             'wait_for_inactive',
             'wait_for_line',
             'wait_for_no_line',
             'when_activated',
             'when_deactivated',
             'when_line',
             'when_no_line'})),
 ('__class__', <class 'gpiozero.input_devices.LineSensor'>),
 ('__del__',
  <bound method GPIOBase.__del__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__delattr__',
  <method-wrapper '__delattr__' of LineSensor object at 0x107639340>),
 ('__dict__',
  {'__attrs__': frozenset({'__class__',
                           '__del__',
                           '__delattr__',
                           '__dict__',
                           '__dir__',
                           '__doc__',
                           '__enter__',
                           '__eq__',
                           '__exit__',
                           '__format__',
                           '__ge__',
                           '__getattribute__',
                           '__gt__',
                           '__hash__',
                           '__init__',
                           '__init_subclass__',
                           '__le__',
                           '__lt__',
                           '__module__',
                           '__ne__',
                           '__new__',
                           '__reduce__',
                           '__reduce_ex__',
                           '__repr__',
                           '__setattr__',
                           '__sizeof__',
                           '__str__',
                           '__subclasshook__',
                           '__weakref__',
                           '_active_event',
                           '_active_state',
                           '_all_events',
                           '_check_open',
                           '_conflicts_with',
                           '_default_pin_factory',
                           '_fire_activated',
                           '_fire_deactivated',
                           '_fire_events',
                           '_inactive_event',
                           '_inactive_state',
                           '_last_active',
                           '_last_changed',
                           '_pin',
                           '_queue',
                           '_read',
                           '_start_stop_events',
                           '_state_to_value',
                           '_threshold',
                           '_wrap_callback',
                           'active_time',
                           'close',
                           'closed',
                           'inactive_time',
                           'is_active',
                           'line_detected',
                           'partial',
                           'pin',
                           'pin_factory',
                           'pull_up',
                           'queue_len',
                           'threshold',
                           'value',
                           'values',
                           'wait_for_active',
                           'wait_for_inactive',
                           'wait_for_line',
                           'wait_for_no_line',
                           'when_activated',
                           'when_deactivated',
                           'when_line',
                           'when_no_line'}),
   '_active_event': <threading.Event object at 0x107639670>,
   '_active_state': True,
   '_inactive_event': <threading.Event object at 0x107639c10>,
   '_inactive_state': False,
   '_last_active': False,
   '_last_changed': 3.291849761,
   '_pin': GPIO5,
   '_queue': <GPIOQueue(Thread-2, started daemon 123145341530112)>,
   '_threshold': 0.5,
   'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x106cc4df0>}),
 ('__dir__', <built-in method __dir__ of LineSensor object at 0x107639340>),
 ('__doc__',
  '\n'
  '    Extends :class:`SmoothedInputDevice` and represents a single pin line\n'
  '    sensor like the TCRT5000 infra-red proximity sensor found in the '
  '`CamJam #3\n'
  '    EduKit`_.\n'
  '\n'
  '    A typical line sensor has a small circuit board with three pins: VCC, '
  'GND,\n'
  '    and OUT. VCC should be connected to a 3V3 pin, GND to one of the '
  'ground\n'
  '    pins, and finally OUT to the GPIO specified as the value of the *pin*\n'
  '    parameter in the constructor.\n'
  '\n'
  '    The following code will print a line of text indicating when the '
  'sensor\n'
  '    detects a line, or stops detecting a line::\n'
  '\n'
  '        from gpiozero import LineSensor\n'
  '        from signal import pause\n'
  '\n'
  '        sensor = LineSensor(4)\n'
  "        sensor.when_line = lambda: print('Line detected')\n"
  "        sensor.when_no_line = lambda: print('No line detected')\n"
  '        pause()\n'
  '\n'
  '    :type pin: int or str\n'
  '    :param pin:\n'
  '        The GPIO pin which the sensor is connected to. See '
  ':ref:`pin-numbering`\n'
  '        for valid pin numbers. If this is :data:`None` a '
  ':exc:`GPIODeviceError`\n'
  '        will be raised.\n'
  '\n'
  '    :type pull_up: bool or None\n'
  '    :param pull_up:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :type active_state: bool or None\n'
  '    :param active_state:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :param int queue_len:\n'
  '        The length of the queue used to store values read from the sensor. '
  'This\n'
  '        defaults to 5.\n'
  '\n'
  '    :param float sample_rate:\n'
  '        The number of values to read from the device (and append to the\n'
  '        internal queue) per second. Defaults to 100.\n'
  '\n'
  '    :param float threshold:\n'
  '        Defaults to 0.5. When the average of all values in the internal '
  'queue\n'
  '        rises above this value, the sensor will be considered "active" by '
  'the\n'
  '        :attr:`~SmoothedInputDevice.is_active` property, and all '
  'appropriate\n'
  '        events will be fired.\n'
  '\n'
  '    :param bool partial:\n'
  '        When :data:`False` (the default), the object will not return a '
  'value\n'
  '        for :attr:`~SmoothedInputDevice.is_active` until the internal queue '
  'has\n'
  '        filled with values.  Only set this to :data:`True` if you require\n'
  '        values immediately after object construction.\n'
  '\n'
  '    :type pin_factory: Factory or None\n'
  '    :param pin_factory:\n'
  '        See :doc:`api_pins` for more information (this is an advanced '
  'feature\n'
  '        which most users can ignore).\n'
  '\n'
  '    .. _CamJam #3 EduKit: http://camjam.me/?page_id=1035\n'
  '    '),
 ('__enter__',
  <bound method GPIOBase.__enter__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__eq__', <method-wrapper '__eq__' of LineSensor object at 0x107639340>),
 ('__exit__',
  <bound method GPIOBase.__exit__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__format__',
  <built-in method __format__ of LineSensor object at 0x107639340>),
 ('__ge__', <method-wrapper '__ge__' of LineSensor object at 0x107639340>),
 ('__getattribute__',
  <method-wrapper '__getattribute__' of LineSensor object at 0x107639340>),
 ('__gt__', <method-wrapper '__gt__' of LineSensor object at 0x107639340>),
 ('__hash__', <method-wrapper '__hash__' of LineSensor object at 0x107639340>),
 ('__init__',
  <bound method LineSensor.__init__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__init_subclass__',
  <built-in method __init_subclass__ of GPIOMeta object at 0x7f9e9da72d30>),
 ('__le__', <method-wrapper '__le__' of LineSensor object at 0x107639340>),
 ('__lt__', <method-wrapper '__lt__' of LineSensor object at 0x107639340>),
 ('__module__', 'gpiozero.input_devices'),
 ('__ne__', <method-wrapper '__ne__' of LineSensor object at 0x107639340>),
 ('__new__', <built-in method __new__ of type object at 0x106b988a8>),
 ('__reduce__',
  <built-in method __reduce__ of LineSensor object at 0x107639340>),
 ('__reduce_ex__',
  <built-in method __reduce_ex__ of LineSensor object at 0x107639340>),
 ('__repr__',
  <bound method SmoothedInputDevice.__repr__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__setattr__',
  <bound method GPIOBase.__setattr__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__sizeof__',
  <built-in method __sizeof__ of LineSensor object at 0x107639340>),
 ('__str__', <method-wrapper '__str__' of LineSensor object at 0x107639340>),
 ('__subclasshook__',
  <built-in method __subclasshook__ of GPIOMeta object at 0x7f9e9da72d30>),
 ('__weakref__', <weakref at 0x106fe8c20; to 'LineSensor' at 0x107639340>),
 ('_active_event', <threading.Event object at 0x107639670>),
 ('_active_state', True),
 ('_all_events',
  <bound method EventsMixin._all_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_check_open',
  <bound method GPIODevice._check_open of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_conflicts_with',
  <bound method Device._conflicts_with of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_default_pin_factory',
  <function Device._default_pin_factory at 0x10702bca0>),
 ('_fire_activated',
  <bound method EventsMixin._fire_activated of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_fire_deactivated',
  <bound method EventsMixin._fire_deactivated of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_fire_events',
  <bound method EventsMixin._fire_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_inactive_event', <threading.Event object at 0x107639c10>),
 ('_inactive_state', False),
 ('_last_active', None),
 ('_last_changed', 3.291849761),
 ('_pin', GPIO5),
 ('_queue', <GPIOQueue(Thread-2, started daemon 123145341530112)>),
 ('_read',
  <bound method GPIODevice._read of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_start_stop_events',
  <bound method EventsMixin._start_stop_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_state_to_value',
  <bound method GPIODevice._state_to_value of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_threshold', 0.5),
 ('_wrap_callback',
  <bound method EventsMixin._wrap_callback of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('active_time', None),
 ('close',
  <bound method SmoothedInputDevice.close of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('closed', False),
 ('inactive_time', None),
 ('is_active', False),
 ('line_detected', True),
 ('partial', False),
 ('pin', GPIO5),
 ('pin_factory', <gpiozero.pins.mock.MockFactory object at 0x106cc4df0>),
 ('pull_up', False),
 ('queue_len', 5),
 ('threshold', 0.5),
 ('value', 0),
 ('values', <generator object ValuesMixin.values at 0x1071d6430>),
 ('wait_for_active',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_inactive',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_line',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_no_line',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('when_activated',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x106d91bb0>>),
 ('when_deactivated',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x106d91bb0>>),
 ('when_line',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x106d91bb0>>),
 ('when_no_line',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x106d91bb0>>)]
2022-06-13 08:34:52 INFO system.build Commissioned Switch rightbutton ID 4409858992 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>
2022-06-13 08:34:52 INFO devices.test Testing rightbutton
2022-06-13 08:37:30 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:37:30 INFO logging.__new__ Created Logger singleton ID 4430909344
2022-06-13 08:37:30 INFO configuration.__new__ backlog: Created Configuration singleton ID 4430187200
2022-06-13 08:37:30 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:37:52 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:37:52 INFO logging.__new__ Created Logger singleton ID 4569780128
2022-06-13 08:37:52 INFO configuration.__new__ backlog: Created Configuration singleton ID 4569057984
2022-06-13 08:37:52 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:37:52 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:37:52 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:37:52 INFO state.__new__ Created StateMachine singleton ID 4569780128
2022-06-13 08:37:52 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:37:52 INFO system.__new__ Created System singleton ID 4569780128
2022-06-13 08:37:52 INFO system.build Configuring 2 devices:
2022-06-13 08:37:52 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:37:52 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:37:52 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:37:52 INFO system.build Commissioned Switch leftbutton ID 4564041344 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:38:16 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:38:16 INFO logging.__new__ Created Logger singleton ID 4388552608
2022-06-13 08:38:16 INFO configuration.__new__ backlog: Created Configuration singleton ID 4387830464
2022-06-13 08:38:16 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:38:16 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:38:16 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:38:16 INFO state.__new__ Created StateMachine singleton ID 4388552608
2022-06-13 08:38:16 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:38:16 INFO system.__new__ Created System singleton ID 4388552608
2022-06-13 08:38:16 INFO system.build Configuring 2 devices:
2022-06-13 08:38:16 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:38:16 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:38:16 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:38:16 INFO system.build Commissioned Switch leftbutton ID 4382817920 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:38:16 INFO system.build Driver consists of [('__attrs__',
  frozenset({'__class__',
             '__del__',
             '__delattr__',
             '__dict__',
             '__dir__',
             '__doc__',
             '__enter__',
             '__eq__',
             '__exit__',
             '__format__',
             '__ge__',
             '__getattribute__',
             '__gt__',
             '__hash__',
             '__init__',
             '__init_subclass__',
             '__le__',
             '__lt__',
             '__module__',
             '__ne__',
             '__new__',
             '__reduce__',
             '__reduce_ex__',
             '__repr__',
             '__setattr__',
             '__sizeof__',
             '__str__',
             '__subclasshook__',
             '__weakref__',
             '_active_event',
             '_active_state',
             '_all_events',
             '_check_open',
             '_conflicts_with',
             '_default_pin_factory',
             '_fire_activated',
             '_fire_deactivated',
             '_fire_events',
             '_inactive_event',
             '_inactive_state',
             '_last_active',
             '_last_changed',
             '_pin',
             '_queue',
             '_read',
             '_start_stop_events',
             '_state_to_value',
             '_threshold',
             '_wrap_callback',
             'active_time',
             'close',
             'closed',
             'inactive_time',
             'is_active',
             'line_detected',
             'partial',
             'pin',
             'pin_factory',
             'pull_up',
             'queue_len',
             'threshold',
             'value',
             'values',
             'wait_for_active',
             'wait_for_inactive',
             'wait_for_line',
             'wait_for_no_line',
             'when_activated',
             'when_deactivated',
             'when_line',
             'when_no_line'})),
 ('__class__', <class 'gpiozero.input_devices.LineSensor'>),
 ('__del__',
  <bound method GPIOBase.__del__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__delattr__',
  <method-wrapper '__delattr__' of LineSensor object at 0x106203370>),
 ('__dict__',
  {'__attrs__': frozenset({'__class__',
                           '__del__',
                           '__delattr__',
                           '__dict__',
                           '__dir__',
                           '__doc__',
                           '__enter__',
                           '__eq__',
                           '__exit__',
                           '__format__',
                           '__ge__',
                           '__getattribute__',
                           '__gt__',
                           '__hash__',
                           '__init__',
                           '__init_subclass__',
                           '__le__',
                           '__lt__',
                           '__module__',
                           '__ne__',
                           '__new__',
                           '__reduce__',
                           '__reduce_ex__',
                           '__repr__',
                           '__setattr__',
                           '__sizeof__',
                           '__str__',
                           '__subclasshook__',
                           '__weakref__',
                           '_active_event',
                           '_active_state',
                           '_all_events',
                           '_check_open',
                           '_conflicts_with',
                           '_default_pin_factory',
                           '_fire_activated',
                           '_fire_deactivated',
                           '_fire_events',
                           '_inactive_event',
                           '_inactive_state',
                           '_last_active',
                           '_last_changed',
                           '_pin',
                           '_queue',
                           '_read',
                           '_start_stop_events',
                           '_state_to_value',
                           '_threshold',
                           '_wrap_callback',
                           'active_time',
                           'close',
                           'closed',
                           'inactive_time',
                           'is_active',
                           'line_detected',
                           'partial',
                           'pin',
                           'pin_factory',
                           'pull_up',
                           'queue_len',
                           'threshold',
                           'value',
                           'values',
                           'wait_for_active',
                           'wait_for_inactive',
                           'wait_for_line',
                           'wait_for_no_line',
                           'when_activated',
                           'when_deactivated',
                           'when_line',
                           'when_no_line'}),
   '_active_event': <threading.Event object at 0x1062033d0>,
   '_active_state': True,
   '_inactive_event': <threading.Event object at 0x1062037f0>,
   '_inactive_state': False,
   '_last_active': False,
   '_last_changed': 0.214649147,
   '_pin': GPIO6,
   '_queue': <GPIOQueue(Thread-1, started daemon 123145420722176)>,
   '_threshold': 0.5,
   'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10588fdf0>}),
 ('__dir__', <built-in method __dir__ of LineSensor object at 0x106203370>),
 ('__doc__',
  '\n'
  '    Extends :class:`SmoothedInputDevice` and represents a single pin line\n'
  '    sensor like the TCRT5000 infra-red proximity sensor found in the '
  '`CamJam #3\n'
  '    EduKit`_.\n'
  '\n'
  '    A typical line sensor has a small circuit board with three pins: VCC, '
  'GND,\n'
  '    and OUT. VCC should be connected to a 3V3 pin, GND to one of the '
  'ground\n'
  '    pins, and finally OUT to the GPIO specified as the value of the *pin*\n'
  '    parameter in the constructor.\n'
  '\n'
  '    The following code will print a line of text indicating when the '
  'sensor\n'
  '    detects a line, or stops detecting a line::\n'
  '\n'
  '        from gpiozero import LineSensor\n'
  '        from signal import pause\n'
  '\n'
  '        sensor = LineSensor(4)\n'
  "        sensor.when_line = lambda: print('Line detected')\n"
  "        sensor.when_no_line = lambda: print('No line detected')\n"
  '        pause()\n'
  '\n'
  '    :type pin: int or str\n'
  '    :param pin:\n'
  '        The GPIO pin which the sensor is connected to. See '
  ':ref:`pin-numbering`\n'
  '        for valid pin numbers. If this is :data:`None` a '
  ':exc:`GPIODeviceError`\n'
  '        will be raised.\n'
  '\n'
  '    :type pull_up: bool or None\n'
  '    :param pull_up:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :type active_state: bool or None\n'
  '    :param active_state:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :param int queue_len:\n'
  '        The length of the queue used to store values read from the sensor. '
  'This\n'
  '        defaults to 5.\n'
  '\n'
  '    :param float sample_rate:\n'
  '        The number of values to read from the device (and append to the\n'
  '        internal queue) per second. Defaults to 100.\n'
  '\n'
  '    :param float threshold:\n'
  '        Defaults to 0.5. When the average of all values in the internal '
  'queue\n'
  '        rises above this value, the sensor will be considered "active" by '
  'the\n'
  '        :attr:`~SmoothedInputDevice.is_active` property, and all '
  'appropriate\n'
  '        events will be fired.\n'
  '\n'
  '    :param bool partial:\n'
  '        When :data:`False` (the default), the object will not return a '
  'value\n'
  '        for :attr:`~SmoothedInputDevice.is_active` until the internal queue '
  'has\n'
  '        filled with values.  Only set this to :data:`True` if you require\n'
  '        values immediately after object construction.\n'
  '\n'
  '    :type pin_factory: Factory or None\n'
  '    :param pin_factory:\n'
  '        See :doc:`api_pins` for more information (this is an advanced '
  'feature\n'
  '        which most users can ignore).\n'
  '\n'
  '    .. _CamJam #3 EduKit: http://camjam.me/?page_id=1035\n'
  '    '),
 ('__enter__',
  <bound method GPIOBase.__enter__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__eq__', <method-wrapper '__eq__' of LineSensor object at 0x106203370>),
 ('__exit__',
  <bound method GPIOBase.__exit__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__format__',
  <built-in method __format__ of LineSensor object at 0x106203370>),
 ('__ge__', <method-wrapper '__ge__' of LineSensor object at 0x106203370>),
 ('__getattribute__',
  <method-wrapper '__getattribute__' of LineSensor object at 0x106203370>),
 ('__gt__', <method-wrapper '__gt__' of LineSensor object at 0x106203370>),
 ('__hash__', <method-wrapper '__hash__' of LineSensor object at 0x106203370>),
 ('__init__',
  <bound method LineSensor.__init__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__init_subclass__',
  <built-in method __init_subclass__ of GPIOMeta object at 0x7fd37a9296e0>),
 ('__le__', <method-wrapper '__le__' of LineSensor object at 0x106203370>),
 ('__lt__', <method-wrapper '__lt__' of LineSensor object at 0x106203370>),
 ('__module__', 'gpiozero.input_devices'),
 ('__ne__', <method-wrapper '__ne__' of LineSensor object at 0x106203370>),
 ('__new__', <built-in method __new__ of type object at 0x1057638a8>),
 ('__reduce__',
  <built-in method __reduce__ of LineSensor object at 0x106203370>),
 ('__reduce_ex__',
  <built-in method __reduce_ex__ of LineSensor object at 0x106203370>),
 ('__repr__',
  <bound method SmoothedInputDevice.__repr__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__setattr__',
  <bound method GPIOBase.__setattr__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__sizeof__',
  <built-in method __sizeof__ of LineSensor object at 0x106203370>),
 ('__str__', <method-wrapper '__str__' of LineSensor object at 0x106203370>),
 ('__subclasshook__',
  <built-in method __subclasshook__ of GPIOMeta object at 0x7fd37a9296e0>),
 ('__weakref__', <weakref at 0x1052bc5e0; to 'LineSensor' at 0x106203370>),
 ('_active_event', <threading.Event object at 0x1062033d0>),
 ('_active_state', True),
 ('_all_events',
  <bound method EventsMixin._all_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_check_open',
  <bound method GPIODevice._check_open of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_conflicts_with',
  <bound method Device._conflicts_with of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_default_pin_factory',
  <function Device._default_pin_factory at 0x105bf6c10>),
 ('_fire_activated',
  <bound method EventsMixin._fire_activated of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_fire_deactivated',
  <bound method EventsMixin._fire_deactivated of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_fire_events',
  <bound method EventsMixin._fire_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_inactive_event', <threading.Event object at 0x1062037f0>),
 ('_inactive_state', False),
 ('_last_active', None),
 ('_last_changed', 0.214649147),
 ('_pin', GPIO6),
 ('_queue', <GPIOQueue(Thread-1, started daemon 123145420722176)>),
 ('_read',
  <bound method GPIODevice._read of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_start_stop_events',
  <bound method EventsMixin._start_stop_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_state_to_value',
  <bound method GPIODevice._state_to_value of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_threshold', 0.5),
 ('_wrap_callback',
  <bound method EventsMixin._wrap_callback of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('active_time', None),
 ('close',
  <bound method SmoothedInputDevice.close of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('closed', False),
 ('inactive_time', None),
 ('is_active', False),
 ('line_detected', True),
 ('partial', False),
 ('pin', GPIO6),
 ('pin_factory', <gpiozero.pins.mock.MockFactory object at 0x10588fdf0>),
 ('pull_up', False),
 ('queue_len', 5),
 ('threshold', 0.5),
 ('value', 0),
 ('values', <generator object ValuesMixin.values at 0x105da13c0>),
 ('wait_for_active',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_inactive',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_line',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_no_line',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('when_activated',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x1053c7e80>>),
 ('when_deactivated',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x1053c7e80>>),
 ('when_line',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x1053c7e80>>),
 ('when_no_line',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x1053c7e80>>)]
2022-06-13 08:38:16 INFO devices.test Testing leftbutton
2022-06-13 08:38:19 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:38:19 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:38:19 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:38:19 INFO system.build Commissioned Switch rightbutton ID 4388674960 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:38:19 INFO system.build Driver consists of [('__attrs__',
  frozenset({'__class__',
             '__del__',
             '__delattr__',
             '__dict__',
             '__dir__',
             '__doc__',
             '__enter__',
             '__eq__',
             '__exit__',
             '__format__',
             '__ge__',
             '__getattribute__',
             '__gt__',
             '__hash__',
             '__init__',
             '__init_subclass__',
             '__le__',
             '__lt__',
             '__module__',
             '__ne__',
             '__new__',
             '__reduce__',
             '__reduce_ex__',
             '__repr__',
             '__setattr__',
             '__sizeof__',
             '__str__',
             '__subclasshook__',
             '__weakref__',
             '_active_event',
             '_active_state',
             '_all_events',
             '_check_open',
             '_conflicts_with',
             '_default_pin_factory',
             '_fire_activated',
             '_fire_deactivated',
             '_fire_events',
             '_inactive_event',
             '_inactive_state',
             '_last_active',
             '_last_changed',
             '_pin',
             '_queue',
             '_read',
             '_start_stop_events',
             '_state_to_value',
             '_threshold',
             '_wrap_callback',
             'active_time',
             'close',
             'closed',
             'inactive_time',
             'is_active',
             'line_detected',
             'partial',
             'pin',
             'pin_factory',
             'pull_up',
             'queue_len',
             'threshold',
             'value',
             'values',
             'wait_for_active',
             'wait_for_inactive',
             'wait_for_line',
             'wait_for_no_line',
             'when_activated',
             'when_deactivated',
             'when_line',
             'when_no_line'})),
 ('__class__', <class 'gpiozero.input_devices.LineSensor'>),
 ('__del__',
  <bound method GPIOBase.__del__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__delattr__',
  <method-wrapper '__delattr__' of LineSensor object at 0x1062035e0>),
 ('__dict__',
  {'__attrs__': frozenset({'__class__',
                           '__del__',
                           '__delattr__',
                           '__dict__',
                           '__dir__',
                           '__doc__',
                           '__enter__',
                           '__eq__',
                           '__exit__',
                           '__format__',
                           '__ge__',
                           '__getattribute__',
                           '__gt__',
                           '__hash__',
                           '__init__',
                           '__init_subclass__',
                           '__le__',
                           '__lt__',
                           '__module__',
                           '__ne__',
                           '__new__',
                           '__reduce__',
                           '__reduce_ex__',
                           '__repr__',
                           '__setattr__',
                           '__sizeof__',
                           '__str__',
                           '__subclasshook__',
                           '__weakref__',
                           '_active_event',
                           '_active_state',
                           '_all_events',
                           '_check_open',
                           '_conflicts_with',
                           '_default_pin_factory',
                           '_fire_activated',
                           '_fire_deactivated',
                           '_fire_events',
                           '_inactive_event',
                           '_inactive_state',
                           '_last_active',
                           '_last_changed',
                           '_pin',
                           '_queue',
                           '_read',
                           '_start_stop_events',
                           '_state_to_value',
                           '_threshold',
                           '_wrap_callback',
                           'active_time',
                           'close',
                           'closed',
                           'inactive_time',
                           'is_active',
                           'line_detected',
                           'partial',
                           'pin',
                           'pin_factory',
                           'pull_up',
                           'queue_len',
                           'threshold',
                           'value',
                           'values',
                           'wait_for_active',
                           'wait_for_inactive',
                           'wait_for_line',
                           'wait_for_no_line',
                           'when_activated',
                           'when_deactivated',
                           'when_line',
                           'when_no_line'}),
   '_active_event': <threading.Event object at 0x1062036a0>,
   '_active_state': True,
   '_inactive_event': <threading.Event object at 0x106203e20>,
   '_inactive_state': False,
   '_last_active': False,
   '_last_changed': 3.294659087,
   '_pin': GPIO5,
   '_queue': <GPIOQueue(Thread-2, started daemon 123145420722176)>,
   '_threshold': 0.5,
   'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10588fdf0>}),
 ('__dir__', <built-in method __dir__ of LineSensor object at 0x1062035e0>),
 ('__doc__',
  '\n'
  '    Extends :class:`SmoothedInputDevice` and represents a single pin line\n'
  '    sensor like the TCRT5000 infra-red proximity sensor found in the '
  '`CamJam #3\n'
  '    EduKit`_.\n'
  '\n'
  '    A typical line sensor has a small circuit board with three pins: VCC, '
  'GND,\n'
  '    and OUT. VCC should be connected to a 3V3 pin, GND to one of the '
  'ground\n'
  '    pins, and finally OUT to the GPIO specified as the value of the *pin*\n'
  '    parameter in the constructor.\n'
  '\n'
  '    The following code will print a line of text indicating when the '
  'sensor\n'
  '    detects a line, or stops detecting a line::\n'
  '\n'
  '        from gpiozero import LineSensor\n'
  '        from signal import pause\n'
  '\n'
  '        sensor = LineSensor(4)\n'
  "        sensor.when_line = lambda: print('Line detected')\n"
  "        sensor.when_no_line = lambda: print('No line detected')\n"
  '        pause()\n'
  '\n'
  '    :type pin: int or str\n'
  '    :param pin:\n'
  '        The GPIO pin which the sensor is connected to. See '
  ':ref:`pin-numbering`\n'
  '        for valid pin numbers. If this is :data:`None` a '
  ':exc:`GPIODeviceError`\n'
  '        will be raised.\n'
  '\n'
  '    :type pull_up: bool or None\n'
  '    :param pull_up:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :type active_state: bool or None\n'
  '    :param active_state:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :param int queue_len:\n'
  '        The length of the queue used to store values read from the sensor. '
  'This\n'
  '        defaults to 5.\n'
  '\n'
  '    :param float sample_rate:\n'
  '        The number of values to read from the device (and append to the\n'
  '        internal queue) per second. Defaults to 100.\n'
  '\n'
  '    :param float threshold:\n'
  '        Defaults to 0.5. When the average of all values in the internal '
  'queue\n'
  '        rises above this value, the sensor will be considered "active" by '
  'the\n'
  '        :attr:`~SmoothedInputDevice.is_active` property, and all '
  'appropriate\n'
  '        events will be fired.\n'
  '\n'
  '    :param bool partial:\n'
  '        When :data:`False` (the default), the object will not return a '
  'value\n'
  '        for :attr:`~SmoothedInputDevice.is_active` until the internal queue '
  'has\n'
  '        filled with values.  Only set this to :data:`True` if you require\n'
  '        values immediately after object construction.\n'
  '\n'
  '    :type pin_factory: Factory or None\n'
  '    :param pin_factory:\n'
  '        See :doc:`api_pins` for more information (this is an advanced '
  'feature\n'
  '        which most users can ignore).\n'
  '\n'
  '    .. _CamJam #3 EduKit: http://camjam.me/?page_id=1035\n'
  '    '),
 ('__enter__',
  <bound method GPIOBase.__enter__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__eq__', <method-wrapper '__eq__' of LineSensor object at 0x1062035e0>),
 ('__exit__',
  <bound method GPIOBase.__exit__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__format__',
  <built-in method __format__ of LineSensor object at 0x1062035e0>),
 ('__ge__', <method-wrapper '__ge__' of LineSensor object at 0x1062035e0>),
 ('__getattribute__',
  <method-wrapper '__getattribute__' of LineSensor object at 0x1062035e0>),
 ('__gt__', <method-wrapper '__gt__' of LineSensor object at 0x1062035e0>),
 ('__hash__', <method-wrapper '__hash__' of LineSensor object at 0x1062035e0>),
 ('__init__',
  <bound method LineSensor.__init__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__init_subclass__',
  <built-in method __init_subclass__ of GPIOMeta object at 0x7fd37a9296e0>),
 ('__le__', <method-wrapper '__le__' of LineSensor object at 0x1062035e0>),
 ('__lt__', <method-wrapper '__lt__' of LineSensor object at 0x1062035e0>),
 ('__module__', 'gpiozero.input_devices'),
 ('__ne__', <method-wrapper '__ne__' of LineSensor object at 0x1062035e0>),
 ('__new__', <built-in method __new__ of type object at 0x1057638a8>),
 ('__reduce__',
  <built-in method __reduce__ of LineSensor object at 0x1062035e0>),
 ('__reduce_ex__',
  <built-in method __reduce_ex__ of LineSensor object at 0x1062035e0>),
 ('__repr__',
  <bound method SmoothedInputDevice.__repr__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__setattr__',
  <bound method GPIOBase.__setattr__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__sizeof__',
  <built-in method __sizeof__ of LineSensor object at 0x1062035e0>),
 ('__str__', <method-wrapper '__str__' of LineSensor object at 0x1062035e0>),
 ('__subclasshook__',
  <built-in method __subclasshook__ of GPIOMeta object at 0x7fd37a9296e0>),
 ('__weakref__', <weakref at 0x105ea9040; to 'LineSensor' at 0x1062035e0>),
 ('_active_event', <threading.Event object at 0x1062036a0>),
 ('_active_state', True),
 ('_all_events',
  <bound method EventsMixin._all_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_check_open',
  <bound method GPIODevice._check_open of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_conflicts_with',
  <bound method Device._conflicts_with of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_default_pin_factory',
  <function Device._default_pin_factory at 0x105bf6c10>),
 ('_fire_activated',
  <bound method EventsMixin._fire_activated of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_fire_deactivated',
  <bound method EventsMixin._fire_deactivated of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_fire_events',
  <bound method EventsMixin._fire_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_inactive_event', <threading.Event object at 0x106203e20>),
 ('_inactive_state', False),
 ('_last_active', None),
 ('_last_changed', 3.294659087),
 ('_pin', GPIO5),
 ('_queue', <GPIOQueue(Thread-2, started daemon 123145420722176)>),
 ('_read',
  <bound method GPIODevice._read of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_start_stop_events',
  <bound method EventsMixin._start_stop_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_state_to_value',
  <bound method GPIODevice._state_to_value of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_threshold', 0.5),
 ('_wrap_callback',
  <bound method EventsMixin._wrap_callback of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('active_time', None),
 ('close',
  <bound method SmoothedInputDevice.close of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('closed', False),
 ('inactive_time', None),
 ('is_active', False),
 ('line_detected', True),
 ('partial', False),
 ('pin', GPIO5),
 ('pin_factory', <gpiozero.pins.mock.MockFactory object at 0x10588fdf0>),
 ('pull_up', False),
 ('queue_len', 5),
 ('threshold', 0.5),
 ('value', 0),
 ('values', <generator object ValuesMixin.values at 0x105da13c0>),
 ('wait_for_active',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_inactive',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_line',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_no_line',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('when_activated',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10595dd90>>),
 ('when_deactivated',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10595dd90>>),
 ('when_line',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10595dd90>>),
 ('when_no_line',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10595dd90>>)]
2022-06-13 08:38:19 INFO devices.test Testing rightbutton
2022-06-13 08:39:35 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:39:35 INFO logging.__new__ Created Logger singleton ID 4485390240
2022-06-13 08:39:35 INFO configuration.__new__ backlog: Created Configuration singleton ID 4484672192
2022-06-13 08:39:35 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:39:35 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:39:35 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:39:35 INFO state.__new__ Created StateMachine singleton ID 4485390240
2022-06-13 08:39:35 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:39:35 INFO system.__new__ Created System singleton ID 4485390240
2022-06-13 08:39:35 INFO system.build Configuring 2 devices:
2022-06-13 08:39:35 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:39:35 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:39:35 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:39:35 INFO system.build Commissioned Switch leftbutton ID 4479655552 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:39:35 INFO system.build Driver consists of [('__attrs__',
  frozenset({'__class__',
             '__del__',
             '__delattr__',
             '__dict__',
             '__dir__',
             '__doc__',
             '__enter__',
             '__eq__',
             '__exit__',
             '__format__',
             '__ge__',
             '__getattribute__',
             '__gt__',
             '__hash__',
             '__init__',
             '__init_subclass__',
             '__le__',
             '__lt__',
             '__module__',
             '__ne__',
             '__new__',
             '__reduce__',
             '__reduce_ex__',
             '__repr__',
             '__setattr__',
             '__sizeof__',
             '__str__',
             '__subclasshook__',
             '__weakref__',
             '_active_event',
             '_active_state',
             '_all_events',
             '_check_open',
             '_conflicts_with',
             '_default_pin_factory',
             '_fire_activated',
             '_fire_deactivated',
             '_fire_events',
             '_inactive_event',
             '_inactive_state',
             '_last_active',
             '_last_changed',
             '_pin',
             '_queue',
             '_read',
             '_start_stop_events',
             '_state_to_value',
             '_threshold',
             '_wrap_callback',
             'active_time',
             'close',
             'closed',
             'inactive_time',
             'is_active',
             'line_detected',
             'partial',
             'pin',
             'pin_factory',
             'pull_up',
             'queue_len',
             'threshold',
             'value',
             'values',
             'wait_for_active',
             'wait_for_inactive',
             'wait_for_line',
             'wait_for_no_line',
             'when_activated',
             'when_deactivated',
             'when_line',
             'when_no_line'})),
 ('__class__', <class 'gpiozero.input_devices.LineSensor'>),
 ('__del__',
  <bound method GPIOBase.__del__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__delattr__',
  <method-wrapper '__delattr__' of LineSensor object at 0x10be5d370>),
 ('__dict__',
  {'__attrs__': frozenset({'__class__',
                           '__del__',
                           '__delattr__',
                           '__dict__',
                           '__dir__',
                           '__doc__',
                           '__enter__',
                           '__eq__',
                           '__exit__',
                           '__format__',
                           '__ge__',
                           '__getattribute__',
                           '__gt__',
                           '__hash__',
                           '__init__',
                           '__init_subclass__',
                           '__le__',
                           '__lt__',
                           '__module__',
                           '__ne__',
                           '__new__',
                           '__reduce__',
                           '__reduce_ex__',
                           '__repr__',
                           '__setattr__',
                           '__sizeof__',
                           '__str__',
                           '__subclasshook__',
                           '__weakref__',
                           '_active_event',
                           '_active_state',
                           '_all_events',
                           '_check_open',
                           '_conflicts_with',
                           '_default_pin_factory',
                           '_fire_activated',
                           '_fire_deactivated',
                           '_fire_events',
                           '_inactive_event',
                           '_inactive_state',
                           '_last_active',
                           '_last_changed',
                           '_pin',
                           '_queue',
                           '_read',
                           '_start_stop_events',
                           '_state_to_value',
                           '_threshold',
                           '_wrap_callback',
                           'active_time',
                           'close',
                           'closed',
                           'inactive_time',
                           'is_active',
                           'line_detected',
                           'partial',
                           'pin',
                           'pin_factory',
                           'pull_up',
                           'queue_len',
                           'threshold',
                           'value',
                           'values',
                           'wait_for_active',
                           'wait_for_inactive',
                           'wait_for_line',
                           'wait_for_no_line',
                           'when_activated',
                           'when_deactivated',
                           'when_line',
                           'when_no_line'}),
   '_active_event': <threading.Event object at 0x10be5d3d0>,
   '_active_state': True,
   '_inactive_event': <threading.Event object at 0x10be5d7f0>,
   '_inactive_state': False,
   '_last_active': False,
   '_last_changed': 0.212348143,
   '_pin': GPIO6,
   '_queue': <GPIOQueue(Thread-1, started daemon 123145376165888)>,
   '_threshold': 0.5,
   'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10b4eadf0>}),
 ('__dir__', <built-in method __dir__ of LineSensor object at 0x10be5d370>),
 ('__doc__',
  '\n'
  '    Extends :class:`SmoothedInputDevice` and represents a single pin line\n'
  '    sensor like the TCRT5000 infra-red proximity sensor found in the '
  '`CamJam #3\n'
  '    EduKit`_.\n'
  '\n'
  '    A typical line sensor has a small circuit board with three pins: VCC, '
  'GND,\n'
  '    and OUT. VCC should be connected to a 3V3 pin, GND to one of the '
  'ground\n'
  '    pins, and finally OUT to the GPIO specified as the value of the *pin*\n'
  '    parameter in the constructor.\n'
  '\n'
  '    The following code will print a line of text indicating when the '
  'sensor\n'
  '    detects a line, or stops detecting a line::\n'
  '\n'
  '        from gpiozero import LineSensor\n'
  '        from signal import pause\n'
  '\n'
  '        sensor = LineSensor(4)\n'
  "        sensor.when_line = lambda: print('Line detected')\n"
  "        sensor.when_no_line = lambda: print('No line detected')\n"
  '        pause()\n'
  '\n'
  '    :type pin: int or str\n'
  '    :param pin:\n'
  '        The GPIO pin which the sensor is connected to. See '
  ':ref:`pin-numbering`\n'
  '        for valid pin numbers. If this is :data:`None` a '
  ':exc:`GPIODeviceError`\n'
  '        will be raised.\n'
  '\n'
  '    :type pull_up: bool or None\n'
  '    :param pull_up:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :type active_state: bool or None\n'
  '    :param active_state:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :param int queue_len:\n'
  '        The length of the queue used to store values read from the sensor. '
  'This\n'
  '        defaults to 5.\n'
  '\n'
  '    :param float sample_rate:\n'
  '        The number of values to read from the device (and append to the\n'
  '        internal queue) per second. Defaults to 100.\n'
  '\n'
  '    :param float threshold:\n'
  '        Defaults to 0.5. When the average of all values in the internal '
  'queue\n'
  '        rises above this value, the sensor will be considered "active" by '
  'the\n'
  '        :attr:`~SmoothedInputDevice.is_active` property, and all '
  'appropriate\n'
  '        events will be fired.\n'
  '\n'
  '    :param bool partial:\n'
  '        When :data:`False` (the default), the object will not return a '
  'value\n'
  '        for :attr:`~SmoothedInputDevice.is_active` until the internal queue '
  'has\n'
  '        filled with values.  Only set this to :data:`True` if you require\n'
  '        values immediately after object construction.\n'
  '\n'
  '    :type pin_factory: Factory or None\n'
  '    :param pin_factory:\n'
  '        See :doc:`api_pins` for more information (this is an advanced '
  'feature\n'
  '        which most users can ignore).\n'
  '\n'
  '    .. _CamJam #3 EduKit: http://camjam.me/?page_id=1035\n'
  '    '),
 ('__enter__',
  <bound method GPIOBase.__enter__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__eq__', <method-wrapper '__eq__' of LineSensor object at 0x10be5d370>),
 ('__exit__',
  <bound method GPIOBase.__exit__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__format__',
  <built-in method __format__ of LineSensor object at 0x10be5d370>),
 ('__ge__', <method-wrapper '__ge__' of LineSensor object at 0x10be5d370>),
 ('__getattribute__',
  <method-wrapper '__getattribute__' of LineSensor object at 0x10be5d370>),
 ('__gt__', <method-wrapper '__gt__' of LineSensor object at 0x10be5d370>),
 ('__hash__', <method-wrapper '__hash__' of LineSensor object at 0x10be5d370>),
 ('__init__',
  <bound method LineSensor.__init__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__init_subclass__',
  <built-in method __init_subclass__ of GPIOMeta object at 0x7ff67cb2e630>),
 ('__le__', <method-wrapper '__le__' of LineSensor object at 0x10be5d370>),
 ('__lt__', <method-wrapper '__lt__' of LineSensor object at 0x10be5d370>),
 ('__module__', 'gpiozero.input_devices'),
 ('__ne__', <method-wrapper '__ne__' of LineSensor object at 0x10be5d370>),
 ('__new__', <built-in method __new__ of type object at 0x10b3bd8a8>),
 ('__reduce__',
  <built-in method __reduce__ of LineSensor object at 0x10be5d370>),
 ('__reduce_ex__',
  <built-in method __reduce_ex__ of LineSensor object at 0x10be5d370>),
 ('__repr__',
  <bound method SmoothedInputDevice.__repr__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__setattr__',
  <bound method GPIOBase.__setattr__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__sizeof__',
  <built-in method __sizeof__ of LineSensor object at 0x10be5d370>),
 ('__str__', <method-wrapper '__str__' of LineSensor object at 0x10be5d370>),
 ('__subclasshook__',
  <built-in method __subclasshook__ of GPIOMeta object at 0x7ff67cb2e630>),
 ('__weakref__', <weakref at 0x10ba5e950; to 'LineSensor' at 0x10be5d370>),
 ('_active_event', <threading.Event object at 0x10be5d3d0>),
 ('_active_state', True),
 ('_all_events',
  <bound method EventsMixin._all_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_check_open',
  <bound method GPIODevice._check_open of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_conflicts_with',
  <bound method Device._conflicts_with of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_default_pin_factory',
  <function Device._default_pin_factory at 0x10b850c10>),
 ('_fire_activated',
  <bound method EventsMixin._fire_activated of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_fire_deactivated',
  <bound method EventsMixin._fire_deactivated of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_fire_events',
  <bound method EventsMixin._fire_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_inactive_event', <threading.Event object at 0x10be5d7f0>),
 ('_inactive_state', False),
 ('_last_active', None),
 ('_last_changed', 0.212348143),
 ('_pin', GPIO6),
 ('_queue', <GPIOQueue(Thread-1, started daemon 123145376165888)>),
 ('_read',
  <bound method GPIODevice._read of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_start_stop_events',
  <bound method EventsMixin._start_stop_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_state_to_value',
  <bound method GPIODevice._state_to_value of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_threshold', 0.5),
 ('_wrap_callback',
  <bound method EventsMixin._wrap_callback of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('active_time', None),
 ('close',
  <bound method SmoothedInputDevice.close of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('closed', False),
 ('inactive_time', None),
 ('is_active', False),
 ('line_detected', True),
 ('partial', False),
 ('pin', GPIO6),
 ('pin_factory', <gpiozero.pins.mock.MockFactory object at 0x10b4eadf0>),
 ('pull_up', False),
 ('queue_len', 5),
 ('threshold', 0.5),
 ('value', 0),
 ('values', <generator object ValuesMixin.values at 0x10b9fb3c0>),
 ('wait_for_active',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_inactive',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_line',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_no_line',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('when_activated',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10b021e80>>),
 ('when_deactivated',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10b021e80>>),
 ('when_line',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10b021e80>>),
 ('when_no_line',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10b021e80>>)]
2022-06-13 08:39:35 INFO devices.test Testing leftbutton
2022-06-13 08:39:35 INFO devices.sense_on 6 is ON
2022-06-13 08:39:35 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:39:35 INFO devices.sense_off 6 is ON
2022-06-13 08:39:35 INFO devices.sense_off Event OFF for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:39:37 INFO devices.sense_on 6 is ON
2022-06-13 08:39:37 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:39:38 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:39:38 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:39:38 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:39:38 INFO system.build Commissioned Switch rightbutton ID 4485509328 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:39:38 INFO system.build Driver consists of [('__attrs__',
  frozenset({'__class__',
             '__del__',
             '__delattr__',
             '__dict__',
             '__dir__',
             '__doc__',
             '__enter__',
             '__eq__',
             '__exit__',
             '__format__',
             '__ge__',
             '__getattribute__',
             '__gt__',
             '__hash__',
             '__init__',
             '__init_subclass__',
             '__le__',
             '__lt__',
             '__module__',
             '__ne__',
             '__new__',
             '__reduce__',
             '__reduce_ex__',
             '__repr__',
             '__setattr__',
             '__sizeof__',
             '__str__',
             '__subclasshook__',
             '__weakref__',
             '_active_event',
             '_active_state',
             '_all_events',
             '_check_open',
             '_conflicts_with',
             '_default_pin_factory',
             '_fire_activated',
             '_fire_deactivated',
             '_fire_events',
             '_inactive_event',
             '_inactive_state',
             '_last_active',
             '_last_changed',
             '_pin',
             '_queue',
             '_read',
             '_start_stop_events',
             '_state_to_value',
             '_threshold',
             '_wrap_callback',
             'active_time',
             'close',
             'closed',
             'inactive_time',
             'is_active',
             'line_detected',
             'partial',
             'pin',
             'pin_factory',
             'pull_up',
             'queue_len',
             'threshold',
             'value',
             'values',
             'wait_for_active',
             'wait_for_inactive',
             'wait_for_line',
             'wait_for_no_line',
             'when_activated',
             'when_deactivated',
             'when_line',
             'when_no_line'})),
 ('__class__', <class 'gpiozero.input_devices.LineSensor'>),
 ('__del__',
  <bound method GPIOBase.__del__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__delattr__',
  <method-wrapper '__delattr__' of LineSensor object at 0x10be5d130>),
 ('__dict__',
  {'__attrs__': frozenset({'__class__',
                           '__del__',
                           '__delattr__',
                           '__dict__',
                           '__dir__',
                           '__doc__',
                           '__enter__',
                           '__eq__',
                           '__exit__',
                           '__format__',
                           '__ge__',
                           '__getattribute__',
                           '__gt__',
                           '__hash__',
                           '__init__',
                           '__init_subclass__',
                           '__le__',
                           '__lt__',
                           '__module__',
                           '__ne__',
                           '__new__',
                           '__reduce__',
                           '__reduce_ex__',
                           '__repr__',
                           '__setattr__',
                           '__sizeof__',
                           '__str__',
                           '__subclasshook__',
                           '__weakref__',
                           '_active_event',
                           '_active_state',
                           '_all_events',
                           '_check_open',
                           '_conflicts_with',
                           '_default_pin_factory',
                           '_fire_activated',
                           '_fire_deactivated',
                           '_fire_events',
                           '_inactive_event',
                           '_inactive_state',
                           '_last_active',
                           '_last_changed',
                           '_pin',
                           '_queue',
                           '_read',
                           '_start_stop_events',
                           '_state_to_value',
                           '_threshold',
                           '_wrap_callback',
                           'active_time',
                           'close',
                           'closed',
                           'inactive_time',
                           'is_active',
                           'line_detected',
                           'partial',
                           'pin',
                           'pin_factory',
                           'pull_up',
                           'queue_len',
                           'threshold',
                           'value',
                           'values',
                           'wait_for_active',
                           'wait_for_inactive',
                           'wait_for_line',
                           'wait_for_no_line',
                           'when_activated',
                           'when_deactivated',
                           'when_line',
                           'when_no_line'}),
   '_active_event': <threading.Event object at 0x10be5d700>,
   '_active_state': True,
   '_inactive_event': <threading.Event object at 0x10be5dc10>,
   '_inactive_state': False,
   '_last_active': False,
   '_last_changed': 3.292286799,
   '_pin': GPIO5,
   '_queue': <GPIOQueue(Thread-2, started daemon 123145392955392)>,
   '_threshold': 0.5,
   'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10b4eadf0>}),
 ('__dir__', <built-in method __dir__ of LineSensor object at 0x10be5d130>),
 ('__doc__',
  '\n'
  '    Extends :class:`SmoothedInputDevice` and represents a single pin line\n'
  '    sensor like the TCRT5000 infra-red proximity sensor found in the '
  '`CamJam #3\n'
  '    EduKit`_.\n'
  '\n'
  '    A typical line sensor has a small circuit board with three pins: VCC, '
  'GND,\n'
  '    and OUT. VCC should be connected to a 3V3 pin, GND to one of the '
  'ground\n'
  '    pins, and finally OUT to the GPIO specified as the value of the *pin*\n'
  '    parameter in the constructor.\n'
  '\n'
  '    The following code will print a line of text indicating when the '
  'sensor\n'
  '    detects a line, or stops detecting a line::\n'
  '\n'
  '        from gpiozero import LineSensor\n'
  '        from signal import pause\n'
  '\n'
  '        sensor = LineSensor(4)\n'
  "        sensor.when_line = lambda: print('Line detected')\n"
  "        sensor.when_no_line = lambda: print('No line detected')\n"
  '        pause()\n'
  '\n'
  '    :type pin: int or str\n'
  '    :param pin:\n'
  '        The GPIO pin which the sensor is connected to. See '
  ':ref:`pin-numbering`\n'
  '        for valid pin numbers. If this is :data:`None` a '
  ':exc:`GPIODeviceError`\n'
  '        will be raised.\n'
  '\n'
  '    :type pull_up: bool or None\n'
  '    :param pull_up:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :type active_state: bool or None\n'
  '    :param active_state:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :param int queue_len:\n'
  '        The length of the queue used to store values read from the sensor. '
  'This\n'
  '        defaults to 5.\n'
  '\n'
  '    :param float sample_rate:\n'
  '        The number of values to read from the device (and append to the\n'
  '        internal queue) per second. Defaults to 100.\n'
  '\n'
  '    :param float threshold:\n'
  '        Defaults to 0.5. When the average of all values in the internal '
  'queue\n'
  '        rises above this value, the sensor will be considered "active" by '
  'the\n'
  '        :attr:`~SmoothedInputDevice.is_active` property, and all '
  'appropriate\n'
  '        events will be fired.\n'
  '\n'
  '    :param bool partial:\n'
  '        When :data:`False` (the default), the object will not return a '
  'value\n'
  '        for :attr:`~SmoothedInputDevice.is_active` until the internal queue '
  'has\n'
  '        filled with values.  Only set this to :data:`True` if you require\n'
  '        values immediately after object construction.\n'
  '\n'
  '    :type pin_factory: Factory or None\n'
  '    :param pin_factory:\n'
  '        See :doc:`api_pins` for more information (this is an advanced '
  'feature\n'
  '        which most users can ignore).\n'
  '\n'
  '    .. _CamJam #3 EduKit: http://camjam.me/?page_id=1035\n'
  '    '),
 ('__enter__',
  <bound method GPIOBase.__enter__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__eq__', <method-wrapper '__eq__' of LineSensor object at 0x10be5d130>),
 ('__exit__',
  <bound method GPIOBase.__exit__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__format__',
  <built-in method __format__ of LineSensor object at 0x10be5d130>),
 ('__ge__', <method-wrapper '__ge__' of LineSensor object at 0x10be5d130>),
 ('__getattribute__',
  <method-wrapper '__getattribute__' of LineSensor object at 0x10be5d130>),
 ('__gt__', <method-wrapper '__gt__' of LineSensor object at 0x10be5d130>),
 ('__hash__', <method-wrapper '__hash__' of LineSensor object at 0x10be5d130>),
 ('__init__',
  <bound method LineSensor.__init__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__init_subclass__',
  <built-in method __init_subclass__ of GPIOMeta object at 0x7ff67cb2e630>),
 ('__le__', <method-wrapper '__le__' of LineSensor object at 0x10be5d130>),
 ('__lt__', <method-wrapper '__lt__' of LineSensor object at 0x10be5d130>),
 ('__module__', 'gpiozero.input_devices'),
 ('__ne__', <method-wrapper '__ne__' of LineSensor object at 0x10be5d130>),
 ('__new__', <built-in method __new__ of type object at 0x10b3bd8a8>),
 ('__reduce__',
  <built-in method __reduce__ of LineSensor object at 0x10be5d130>),
 ('__reduce_ex__',
  <built-in method __reduce_ex__ of LineSensor object at 0x10be5d130>),
 ('__repr__',
  <bound method SmoothedInputDevice.__repr__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__setattr__',
  <bound method GPIOBase.__setattr__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__sizeof__',
  <built-in method __sizeof__ of LineSensor object at 0x10be5d130>),
 ('__str__', <method-wrapper '__str__' of LineSensor object at 0x10be5d130>),
 ('__subclasshook__',
  <built-in method __subclasshook__ of GPIOMeta object at 0x7ff67cb2e630>),
 ('__weakref__', <weakref at 0x10be62860; to 'LineSensor' at 0x10be5d130>),
 ('_active_event', <threading.Event object at 0x10be5d700>),
 ('_active_state', True),
 ('_all_events',
  <bound method EventsMixin._all_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_check_open',
  <bound method GPIODevice._check_open of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_conflicts_with',
  <bound method Device._conflicts_with of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_default_pin_factory',
  <function Device._default_pin_factory at 0x10b850c10>),
 ('_fire_activated',
  <bound method EventsMixin._fire_activated of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_fire_deactivated',
  <bound method EventsMixin._fire_deactivated of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_fire_events',
  <bound method EventsMixin._fire_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_inactive_event', <threading.Event object at 0x10be5dc10>),
 ('_inactive_state', False),
 ('_last_active', None),
 ('_last_changed', 3.292286799),
 ('_pin', GPIO5),
 ('_queue', <GPIOQueue(Thread-2, started daemon 123145392955392)>),
 ('_read',
  <bound method GPIODevice._read of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_start_stop_events',
  <bound method EventsMixin._start_stop_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_state_to_value',
  <bound method GPIODevice._state_to_value of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_threshold', 0.5),
 ('_wrap_callback',
  <bound method EventsMixin._wrap_callback of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('active_time', None),
 ('close',
  <bound method SmoothedInputDevice.close of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('closed', False),
 ('inactive_time', None),
 ('is_active', False),
 ('line_detected', True),
 ('partial', False),
 ('pin', GPIO5),
 ('pin_factory', <gpiozero.pins.mock.MockFactory object at 0x10b4eadf0>),
 ('pull_up', False),
 ('queue_len', 5),
 ('threshold', 0.5),
 ('value', 0),
 ('values', <generator object ValuesMixin.values at 0x10b9fb3c0>),
 ('wait_for_active',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_inactive',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_line',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_no_line',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('when_activated',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10b5b70d0>>),
 ('when_deactivated',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10b5b70d0>>),
 ('when_line',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10b5b70d0>>),
 ('when_no_line',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10b5b70d0>>)]
2022-06-13 08:39:38 INFO devices.test Testing rightbutton
2022-06-13 08:39:38 INFO devices.sense_on 5 is ON
2022-06-13 08:39:38 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:39:38 INFO devices.sense_off 5 is ON
2022-06-13 08:39:38 INFO devices.sense_off Event OFF for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:39:40 INFO devices.sense_on 5 is ON
2022-06-13 08:39:40 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:41:36 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:41:36 INFO logging.__new__ Created Logger singleton ID 4477538208
2022-06-13 08:41:36 INFO configuration.__new__ backlog: Created Configuration singleton ID 4476820160
2022-06-13 08:41:36 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:41:36 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:41:36 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:41:37 INFO state.__new__ Created StateMachine singleton ID 4477538208
2022-06-13 08:41:37 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:41:37 INFO system.__new__ Created System singleton ID 4477538208
2022-06-13 08:41:37 INFO system.build Configuring 2 devices:
2022-06-13 08:41:37 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:41:37 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:41:37 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:41:37 INFO system.build Commissioned Switch leftbutton ID 4471803520 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:41:37 INFO system.build 


Driver consists of [('__attrs__',
  frozenset({'__class__',
             '__del__',
             '__delattr__',
             '__dict__',
             '__dir__',
             '__doc__',
             '__enter__',
             '__eq__',
             '__exit__',
             '__format__',
             '__ge__',
             '__getattribute__',
             '__gt__',
             '__hash__',
             '__init__',
             '__init_subclass__',
             '__le__',
             '__lt__',
             '__module__',
             '__ne__',
             '__new__',
             '__reduce__',
             '__reduce_ex__',
             '__repr__',
             '__setattr__',
             '__sizeof__',
             '__str__',
             '__subclasshook__',
             '__weakref__',
             '_active_event',
             '_active_state',
             '_all_events',
             '_check_open',
             '_conflicts_with',
             '_default_pin_factory',
             '_fire_activated',
             '_fire_deactivated',
             '_fire_events',
             '_inactive_event',
             '_inactive_state',
             '_last_active',
             '_last_changed',
             '_pin',
             '_queue',
             '_read',
             '_start_stop_events',
             '_state_to_value',
             '_threshold',
             '_wrap_callback',
             'active_time',
             'close',
             'closed',
             'inactive_time',
             'is_active',
             'line_detected',
             'partial',
             'pin',
             'pin_factory',
             'pull_up',
             'queue_len',
             'threshold',
             'value',
             'values',
             'wait_for_active',
             'wait_for_inactive',
             'wait_for_line',
             'wait_for_no_line',
             'when_activated',
             'when_deactivated',
             'when_line',
             'when_no_line'})),
 ('__class__', <class 'gpiozero.input_devices.LineSensor'>),
 ('__del__',
  <bound method GPIOBase.__del__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__delattr__',
  <method-wrapper '__delattr__' of LineSensor object at 0x10b6e0370>),
 ('__dict__',
  {'__attrs__': frozenset({'__class__',
                           '__del__',
                           '__delattr__',
                           '__dict__',
                           '__dir__',
                           '__doc__',
                           '__enter__',
                           '__eq__',
                           '__exit__',
                           '__format__',
                           '__ge__',
                           '__getattribute__',
                           '__gt__',
                           '__hash__',
                           '__init__',
                           '__init_subclass__',
                           '__le__',
                           '__lt__',
                           '__module__',
                           '__ne__',
                           '__new__',
                           '__reduce__',
                           '__reduce_ex__',
                           '__repr__',
                           '__setattr__',
                           '__sizeof__',
                           '__str__',
                           '__subclasshook__',
                           '__weakref__',
                           '_active_event',
                           '_active_state',
                           '_all_events',
                           '_check_open',
                           '_conflicts_with',
                           '_default_pin_factory',
                           '_fire_activated',
                           '_fire_deactivated',
                           '_fire_events',
                           '_inactive_event',
                           '_inactive_state',
                           '_last_active',
                           '_last_changed',
                           '_pin',
                           '_queue',
                           '_read',
                           '_start_stop_events',
                           '_state_to_value',
                           '_threshold',
                           '_wrap_callback',
                           'active_time',
                           'close',
                           'closed',
                           'inactive_time',
                           'is_active',
                           'line_detected',
                           'partial',
                           'pin',
                           'pin_factory',
                           'pull_up',
                           'queue_len',
                           'threshold',
                           'value',
                           'values',
                           'wait_for_active',
                           'wait_for_inactive',
                           'wait_for_line',
                           'wait_for_no_line',
                           'when_activated',
                           'when_deactivated',
                           'when_line',
                           'when_no_line'}),
   '_active_event': <threading.Event object at 0x10b6e03d0>,
   '_active_state': True,
   '_inactive_event': <threading.Event object at 0x10b6e07f0>,
   '_inactive_state': False,
   '_last_active': False,
   '_last_changed': 0.215569555,
   '_pin': GPIO6,
   '_queue': <GPIOQueue(Thread-1, started daemon 123145490014208)>,
   '_threshold': 0.5,
   'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10ad6ddf0>}),
 ('__dir__', <built-in method __dir__ of LineSensor object at 0x10b6e0370>),
 ('__doc__',
  '\n'
  '    Extends :class:`SmoothedInputDevice` and represents a single pin line\n'
  '    sensor like the TCRT5000 infra-red proximity sensor found in the '
  '`CamJam #3\n'
  '    EduKit`_.\n'
  '\n'
  '    A typical line sensor has a small circuit board with three pins: VCC, '
  'GND,\n'
  '    and OUT. VCC should be connected to a 3V3 pin, GND to one of the '
  'ground\n'
  '    pins, and finally OUT to the GPIO specified as the value of the *pin*\n'
  '    parameter in the constructor.\n'
  '\n'
  '    The following code will print a line of text indicating when the '
  'sensor\n'
  '    detects a line, or stops detecting a line::\n'
  '\n'
  '        from gpiozero import LineSensor\n'
  '        from signal import pause\n'
  '\n'
  '        sensor = LineSensor(4)\n'
  "        sensor.when_line = lambda: print('Line detected')\n"
  "        sensor.when_no_line = lambda: print('No line detected')\n"
  '        pause()\n'
  '\n'
  '    :type pin: int or str\n'
  '    :param pin:\n'
  '        The GPIO pin which the sensor is connected to. See '
  ':ref:`pin-numbering`\n'
  '        for valid pin numbers. If this is :data:`None` a '
  ':exc:`GPIODeviceError`\n'
  '        will be raised.\n'
  '\n'
  '    :type pull_up: bool or None\n'
  '    :param pull_up:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :type active_state: bool or None\n'
  '    :param active_state:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :param int queue_len:\n'
  '        The length of the queue used to store values read from the sensor. '
  'This\n'
  '        defaults to 5.\n'
  '\n'
  '    :param float sample_rate:\n'
  '        The number of values to read from the device (and append to the\n'
  '        internal queue) per second. Defaults to 100.\n'
  '\n'
  '    :param float threshold:\n'
  '        Defaults to 0.5. When the average of all values in the internal '
  'queue\n'
  '        rises above this value, the sensor will be considered "active" by '
  'the\n'
  '        :attr:`~SmoothedInputDevice.is_active` property, and all '
  'appropriate\n'
  '        events will be fired.\n'
  '\n'
  '    :param bool partial:\n'
  '        When :data:`False` (the default), the object will not return a '
  'value\n'
  '        for :attr:`~SmoothedInputDevice.is_active` until the internal queue '
  'has\n'
  '        filled with values.  Only set this to :data:`True` if you require\n'
  '        values immediately after object construction.\n'
  '\n'
  '    :type pin_factory: Factory or None\n'
  '    :param pin_factory:\n'
  '        See :doc:`api_pins` for more information (this is an advanced '
  'feature\n'
  '        which most users can ignore).\n'
  '\n'
  '    .. _CamJam #3 EduKit: http://camjam.me/?page_id=1035\n'
  '    '),
 ('__enter__',
  <bound method GPIOBase.__enter__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__eq__', <method-wrapper '__eq__' of LineSensor object at 0x10b6e0370>),
 ('__exit__',
  <bound method GPIOBase.__exit__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__format__',
  <built-in method __format__ of LineSensor object at 0x10b6e0370>),
 ('__ge__', <method-wrapper '__ge__' of LineSensor object at 0x10b6e0370>),
 ('__getattribute__',
  <method-wrapper '__getattribute__' of LineSensor object at 0x10b6e0370>),
 ('__gt__', <method-wrapper '__gt__' of LineSensor object at 0x10b6e0370>),
 ('__hash__', <method-wrapper '__hash__' of LineSensor object at 0x10b6e0370>),
 ('__init__',
  <bound method LineSensor.__init__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__init_subclass__',
  <built-in method __init_subclass__ of GPIOMeta object at 0x7fb33473caf0>),
 ('__le__', <method-wrapper '__le__' of LineSensor object at 0x10b6e0370>),
 ('__lt__', <method-wrapper '__lt__' of LineSensor object at 0x10b6e0370>),
 ('__module__', 'gpiozero.input_devices'),
 ('__ne__', <method-wrapper '__ne__' of LineSensor object at 0x10b6e0370>),
 ('__new__', <built-in method __new__ of type object at 0x10ac408a8>),
 ('__reduce__',
  <built-in method __reduce__ of LineSensor object at 0x10b6e0370>),
 ('__reduce_ex__',
  <built-in method __reduce_ex__ of LineSensor object at 0x10b6e0370>),
 ('__repr__',
  <bound method SmoothedInputDevice.__repr__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__setattr__',
  <bound method GPIOBase.__setattr__ of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('__sizeof__',
  <built-in method __sizeof__ of LineSensor object at 0x10b6e0370>),
 ('__str__', <method-wrapper '__str__' of LineSensor object at 0x10b6e0370>),
 ('__subclasshook__',
  <built-in method __subclasshook__ of GPIOMeta object at 0x7fb33473caf0>),
 ('__weakref__', <weakref at 0x10ae2b900; to 'LineSensor' at 0x10b6e0370>),
 ('_active_event', <threading.Event object at 0x10b6e03d0>),
 ('_active_state', True),
 ('_all_events',
  <bound method EventsMixin._all_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_check_open',
  <bound method GPIODevice._check_open of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_conflicts_with',
  <bound method Device._conflicts_with of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_default_pin_factory',
  <function Device._default_pin_factory at 0x10b0d3c10>),
 ('_fire_activated',
  <bound method EventsMixin._fire_activated of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_fire_deactivated',
  <bound method EventsMixin._fire_deactivated of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_fire_events',
  <bound method EventsMixin._fire_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_inactive_event', <threading.Event object at 0x10b6e07f0>),
 ('_inactive_state', False),
 ('_last_active', None),
 ('_last_changed', 0.215569555),
 ('_pin', GPIO6),
 ('_queue', <GPIOQueue(Thread-1, started daemon 123145490014208)>),
 ('_read',
  <bound method GPIODevice._read of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_start_stop_events',
  <bound method EventsMixin._start_stop_events of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_state_to_value',
  <bound method GPIODevice._state_to_value of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('_threshold', 0.5),
 ('_wrap_callback',
  <bound method EventsMixin._wrap_callback of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('active_time', None),
 ('close',
  <bound method SmoothedInputDevice.close of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('closed', False),
 ('inactive_time', None),
 ('is_active', False),
 ('line_detected', True),
 ('partial', False),
 ('pin', GPIO6),
 ('pin_factory', <gpiozero.pins.mock.MockFactory object at 0x10ad6ddf0>),
 ('pull_up', False),
 ('queue_len', 5),
 ('threshold', 0.5),
 ('value', 0),
 ('values', <generator object ValuesMixin.values at 0x10b27e3c0>),
 ('wait_for_active',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_inactive',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_line',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('wait_for_no_line',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO6, pull_up=False, is_active=False>>),
 ('when_activated',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10a8a4e80>>),
 ('when_deactivated',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10a8a4e80>>),
 ('when_line',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10a8a4e80>>),
 ('when_no_line',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10a8a4e80>>)]
2022-06-13 08:41:37 INFO devices.test Testing leftbutton
2022-06-13 08:41:37 INFO devices.sense_on 6 is ON
2022-06-13 08:41:37 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:41:37 INFO devices.sense_off 6 is ON
2022-06-13 08:41:37 INFO devices.sense_off Event OFF for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:41:39 INFO devices.sense_on 6 is ON
2022-06-13 08:41:39 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:41:40 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:41:40 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:41:40 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:41:40 INFO system.build Commissioned Switch rightbutton ID 4477657296 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:41:40 INFO system.build 


Driver consists of [('__attrs__',
  frozenset({'__class__',
             '__del__',
             '__delattr__',
             '__dict__',
             '__dir__',
             '__doc__',
             '__enter__',
             '__eq__',
             '__exit__',
             '__format__',
             '__ge__',
             '__getattribute__',
             '__gt__',
             '__hash__',
             '__init__',
             '__init_subclass__',
             '__le__',
             '__lt__',
             '__module__',
             '__ne__',
             '__new__',
             '__reduce__',
             '__reduce_ex__',
             '__repr__',
             '__setattr__',
             '__sizeof__',
             '__str__',
             '__subclasshook__',
             '__weakref__',
             '_active_event',
             '_active_state',
             '_all_events',
             '_check_open',
             '_conflicts_with',
             '_default_pin_factory',
             '_fire_activated',
             '_fire_deactivated',
             '_fire_events',
             '_inactive_event',
             '_inactive_state',
             '_last_active',
             '_last_changed',
             '_pin',
             '_queue',
             '_read',
             '_start_stop_events',
             '_state_to_value',
             '_threshold',
             '_wrap_callback',
             'active_time',
             'close',
             'closed',
             'inactive_time',
             'is_active',
             'line_detected',
             'partial',
             'pin',
             'pin_factory',
             'pull_up',
             'queue_len',
             'threshold',
             'value',
             'values',
             'wait_for_active',
             'wait_for_inactive',
             'wait_for_line',
             'wait_for_no_line',
             'when_activated',
             'when_deactivated',
             'when_line',
             'when_no_line'})),
 ('__class__', <class 'gpiozero.input_devices.LineSensor'>),
 ('__del__',
  <bound method GPIOBase.__del__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__delattr__',
  <method-wrapper '__delattr__' of LineSensor object at 0x10b6e0130>),
 ('__dict__',
  {'__attrs__': frozenset({'__class__',
                           '__del__',
                           '__delattr__',
                           '__dict__',
                           '__dir__',
                           '__doc__',
                           '__enter__',
                           '__eq__',
                           '__exit__',
                           '__format__',
                           '__ge__',
                           '__getattribute__',
                           '__gt__',
                           '__hash__',
                           '__init__',
                           '__init_subclass__',
                           '__le__',
                           '__lt__',
                           '__module__',
                           '__ne__',
                           '__new__',
                           '__reduce__',
                           '__reduce_ex__',
                           '__repr__',
                           '__setattr__',
                           '__sizeof__',
                           '__str__',
                           '__subclasshook__',
                           '__weakref__',
                           '_active_event',
                           '_active_state',
                           '_all_events',
                           '_check_open',
                           '_conflicts_with',
                           '_default_pin_factory',
                           '_fire_activated',
                           '_fire_deactivated',
                           '_fire_events',
                           '_inactive_event',
                           '_inactive_state',
                           '_last_active',
                           '_last_changed',
                           '_pin',
                           '_queue',
                           '_read',
                           '_start_stop_events',
                           '_state_to_value',
                           '_threshold',
                           '_wrap_callback',
                           'active_time',
                           'close',
                           'closed',
                           'inactive_time',
                           'is_active',
                           'line_detected',
                           'partial',
                           'pin',
                           'pin_factory',
                           'pull_up',
                           'queue_len',
                           'threshold',
                           'value',
                           'values',
                           'wait_for_active',
                           'wait_for_inactive',
                           'wait_for_line',
                           'wait_for_no_line',
                           'when_activated',
                           'when_deactivated',
                           'when_line',
                           'when_no_line'}),
   '_active_event': <threading.Event object at 0x10b6e0700>,
   '_active_state': True,
   '_inactive_event': <threading.Event object at 0x10b6e0f40>,
   '_inactive_state': False,
   '_last_active': False,
   '_last_changed': 3.288062139,
   '_pin': GPIO5,
   '_queue': <GPIOQueue(Thread-2, started daemon 123145506803712)>,
   '_threshold': 0.5,
   'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10ad6ddf0>}),
 ('__dir__', <built-in method __dir__ of LineSensor object at 0x10b6e0130>),
 ('__doc__',
  '\n'
  '    Extends :class:`SmoothedInputDevice` and represents a single pin line\n'
  '    sensor like the TCRT5000 infra-red proximity sensor found in the '
  '`CamJam #3\n'
  '    EduKit`_.\n'
  '\n'
  '    A typical line sensor has a small circuit board with three pins: VCC, '
  'GND,\n'
  '    and OUT. VCC should be connected to a 3V3 pin, GND to one of the '
  'ground\n'
  '    pins, and finally OUT to the GPIO specified as the value of the *pin*\n'
  '    parameter in the constructor.\n'
  '\n'
  '    The following code will print a line of text indicating when the '
  'sensor\n'
  '    detects a line, or stops detecting a line::\n'
  '\n'
  '        from gpiozero import LineSensor\n'
  '        from signal import pause\n'
  '\n'
  '        sensor = LineSensor(4)\n'
  "        sensor.when_line = lambda: print('Line detected')\n"
  "        sensor.when_no_line = lambda: print('No line detected')\n"
  '        pause()\n'
  '\n'
  '    :type pin: int or str\n'
  '    :param pin:\n'
  '        The GPIO pin which the sensor is connected to. See '
  ':ref:`pin-numbering`\n'
  '        for valid pin numbers. If this is :data:`None` a '
  ':exc:`GPIODeviceError`\n'
  '        will be raised.\n'
  '\n'
  '    :type pull_up: bool or None\n'
  '    :param pull_up:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :type active_state: bool or None\n'
  '    :param active_state:\n'
  '        See description under :class:`InputDevice` for more information.\n'
  '\n'
  '    :param int queue_len:\n'
  '        The length of the queue used to store values read from the sensor. '
  'This\n'
  '        defaults to 5.\n'
  '\n'
  '    :param float sample_rate:\n'
  '        The number of values to read from the device (and append to the\n'
  '        internal queue) per second. Defaults to 100.\n'
  '\n'
  '    :param float threshold:\n'
  '        Defaults to 0.5. When the average of all values in the internal '
  'queue\n'
  '        rises above this value, the sensor will be considered "active" by '
  'the\n'
  '        :attr:`~SmoothedInputDevice.is_active` property, and all '
  'appropriate\n'
  '        events will be fired.\n'
  '\n'
  '    :param bool partial:\n'
  '        When :data:`False` (the default), the object will not return a '
  'value\n'
  '        for :attr:`~SmoothedInputDevice.is_active` until the internal queue '
  'has\n'
  '        filled with values.  Only set this to :data:`True` if you require\n'
  '        values immediately after object construction.\n'
  '\n'
  '    :type pin_factory: Factory or None\n'
  '    :param pin_factory:\n'
  '        See :doc:`api_pins` for more information (this is an advanced '
  'feature\n'
  '        which most users can ignore).\n'
  '\n'
  '    .. _CamJam #3 EduKit: http://camjam.me/?page_id=1035\n'
  '    '),
 ('__enter__',
  <bound method GPIOBase.__enter__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__eq__', <method-wrapper '__eq__' of LineSensor object at 0x10b6e0130>),
 ('__exit__',
  <bound method GPIOBase.__exit__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__format__',
  <built-in method __format__ of LineSensor object at 0x10b6e0130>),
 ('__ge__', <method-wrapper '__ge__' of LineSensor object at 0x10b6e0130>),
 ('__getattribute__',
  <method-wrapper '__getattribute__' of LineSensor object at 0x10b6e0130>),
 ('__gt__', <method-wrapper '__gt__' of LineSensor object at 0x10b6e0130>),
 ('__hash__', <method-wrapper '__hash__' of LineSensor object at 0x10b6e0130>),
 ('__init__',
  <bound method LineSensor.__init__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__init_subclass__',
  <built-in method __init_subclass__ of GPIOMeta object at 0x7fb33473caf0>),
 ('__le__', <method-wrapper '__le__' of LineSensor object at 0x10b6e0130>),
 ('__lt__', <method-wrapper '__lt__' of LineSensor object at 0x10b6e0130>),
 ('__module__', 'gpiozero.input_devices'),
 ('__ne__', <method-wrapper '__ne__' of LineSensor object at 0x10b6e0130>),
 ('__new__', <built-in method __new__ of type object at 0x10ac408a8>),
 ('__reduce__',
  <built-in method __reduce__ of LineSensor object at 0x10b6e0130>),
 ('__reduce_ex__',
  <built-in method __reduce_ex__ of LineSensor object at 0x10b6e0130>),
 ('__repr__',
  <bound method SmoothedInputDevice.__repr__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__setattr__',
  <bound method GPIOBase.__setattr__ of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('__sizeof__',
  <built-in method __sizeof__ of LineSensor object at 0x10b6e0130>),
 ('__str__', <method-wrapper '__str__' of LineSensor object at 0x10b6e0130>),
 ('__subclasshook__',
  <built-in method __subclasshook__ of GPIOMeta object at 0x7fb33473caf0>),
 ('__weakref__', <weakref at 0x10b248680; to 'LineSensor' at 0x10b6e0130>),
 ('_active_event', <threading.Event object at 0x10b6e0700>),
 ('_active_state', True),
 ('_all_events',
  <bound method EventsMixin._all_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_check_open',
  <bound method GPIODevice._check_open of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_conflicts_with',
  <bound method Device._conflicts_with of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_default_pin_factory',
  <function Device._default_pin_factory at 0x10b0d3c10>),
 ('_fire_activated',
  <bound method EventsMixin._fire_activated of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_fire_deactivated',
  <bound method EventsMixin._fire_deactivated of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_fire_events',
  <bound method EventsMixin._fire_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_inactive_event', <threading.Event object at 0x10b6e0f40>),
 ('_inactive_state', False),
 ('_last_active', None),
 ('_last_changed', 3.288062139),
 ('_pin', GPIO5),
 ('_queue', <GPIOQueue(Thread-2, started daemon 123145506803712)>),
 ('_read',
  <bound method GPIODevice._read of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_start_stop_events',
  <bound method EventsMixin._start_stop_events of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_state_to_value',
  <bound method GPIODevice._state_to_value of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('_threshold', 0.5),
 ('_wrap_callback',
  <bound method EventsMixin._wrap_callback of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('active_time', None),
 ('close',
  <bound method SmoothedInputDevice.close of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('closed', False),
 ('inactive_time', None),
 ('is_active', False),
 ('line_detected', True),
 ('partial', False),
 ('pin', GPIO5),
 ('pin_factory', <gpiozero.pins.mock.MockFactory object at 0x10ad6ddf0>),
 ('pull_up', False),
 ('queue_len', 5),
 ('threshold', 0.5),
 ('value', 0),
 ('values', <generator object ValuesMixin.values at 0x10b27e3c0>),
 ('wait_for_active',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_inactive',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_line',
  <bound method EventsMixin.wait_for_inactive of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('wait_for_no_line',
  <bound method EventsMixin.wait_for_active of <gpiozero.LineSensor object on pin GPIO5, pull_up=False, is_active=False>>),
 ('when_activated',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10ae3a0d0>>),
 ('when_deactivated',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10ae3a0d0>>),
 ('when_line',
  <bound method Switch.sense_off of <fabric.devices.Switch object at 0x10ae3a0d0>>),
 ('when_no_line',
  <bound method Switch.sense_on of <fabric.devices.Switch object at 0x10ae3a0d0>>)]
2022-06-13 08:41:40 INFO devices.test Testing rightbutton
2022-06-13 08:41:40 INFO devices.sense_on 5 is ON
2022-06-13 08:41:40 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:41:40 INFO devices.sense_off 5 is ON
2022-06-13 08:41:40 INFO devices.sense_off Event OFF for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:41:42 INFO devices.sense_on 5 is ON
2022-06-13 08:41:42 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:42:28 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:42:28 INFO logging.__new__ Created Logger singleton ID 4500180896
2022-06-13 08:42:28 INFO configuration.__new__ backlog: Created Configuration singleton ID 4499462848
2022-06-13 08:42:28 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:42:28 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:42:28 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:42:28 INFO state.__new__ Created StateMachine singleton ID 4500180896
2022-06-13 08:42:28 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:42:28 INFO system.__new__ Created System singleton ID 4500180896
2022-06-13 08:42:28 INFO system.build Configuring 2 devices:
2022-06-13 08:42:28 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:42:28 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:42:28 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:42:28 INFO system.build Commissioned Switch leftbutton ID 4494446208 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:42:28 INFO system.build 


Driver consists of {'__attrs__': frozenset({'__class__',
                         '__del__',
                         '__delattr__',
                         '__dict__',
                         '__dir__',
                         '__doc__',
                         '__enter__',
                         '__eq__',
                         '__exit__',
                         '__format__',
                         '__ge__',
                         '__getattribute__',
                         '__gt__',
                         '__hash__',
                         '__init__',
                         '__init_subclass__',
                         '__le__',
                         '__lt__',
                         '__module__',
                         '__ne__',
                         '__new__',
                         '__reduce__',
                         '__reduce_ex__',
                         '__repr__',
                         '__setattr__',
                         '__sizeof__',
                         '__str__',
                         '__subclasshook__',
                         '__weakref__',
                         '_active_event',
                         '_active_state',
                         '_all_events',
                         '_check_open',
                         '_conflicts_with',
                         '_default_pin_factory',
                         '_fire_activated',
                         '_fire_deactivated',
                         '_fire_events',
                         '_inactive_event',
                         '_inactive_state',
                         '_last_active',
                         '_last_changed',
                         '_pin',
                         '_queue',
                         '_read',
                         '_start_stop_events',
                         '_state_to_value',
                         '_threshold',
                         '_wrap_callback',
                         'active_time',
                         'close',
                         'closed',
                         'inactive_time',
                         'is_active',
                         'line_detected',
                         'partial',
                         'pin',
                         'pin_factory',
                         'pull_up',
                         'queue_len',
                         'threshold',
                         'value',
                         'values',
                         'wait_for_active',
                         'wait_for_inactive',
                         'wait_for_line',
                         'wait_for_no_line',
                         'when_activated',
                         'when_deactivated',
                         'when_line',
                         'when_no_line'}),
 '_active_event': <threading.Event object at 0x10cc783d0>,
 '_active_state': True,
 '_inactive_event': <threading.Event object at 0x10cc787f0>,
 '_inactive_state': False,
 '_last_active': None,
 '_last_changed': 0.21765714,
 '_pin': GPIO6,
 '_queue': <GPIOQueue(Thread-1, started daemon 123145499709440)>,
 '_threshold': 0.5,
 'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10c305df0>}
2022-06-13 08:42:28 INFO devices.test Testing leftbutton
2022-06-13 08:42:28 INFO devices.sense_off 6 is ON
2022-06-13 08:42:28 INFO devices.sense_off Event OFF for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:42:30 INFO devices.sense_on 6 is ON
2022-06-13 08:42:30 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:42:31 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:42:31 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:42:31 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:42:31 INFO system.build Commissioned Switch rightbutton ID 4500303248 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:42:31 INFO system.build 


Driver consists of {'__attrs__': frozenset({'__class__',
                         '__del__',
                         '__delattr__',
                         '__dict__',
                         '__dir__',
                         '__doc__',
                         '__enter__',
                         '__eq__',
                         '__exit__',
                         '__format__',
                         '__ge__',
                         '__getattribute__',
                         '__gt__',
                         '__hash__',
                         '__init__',
                         '__init_subclass__',
                         '__le__',
                         '__lt__',
                         '__module__',
                         '__ne__',
                         '__new__',
                         '__reduce__',
                         '__reduce_ex__',
                         '__repr__',
                         '__setattr__',
                         '__sizeof__',
                         '__str__',
                         '__subclasshook__',
                         '__weakref__',
                         '_active_event',
                         '_active_state',
                         '_all_events',
                         '_check_open',
                         '_conflicts_with',
                         '_default_pin_factory',
                         '_fire_activated',
                         '_fire_deactivated',
                         '_fire_events',
                         '_inactive_event',
                         '_inactive_state',
                         '_last_active',
                         '_last_changed',
                         '_pin',
                         '_queue',
                         '_read',
                         '_start_stop_events',
                         '_state_to_value',
                         '_threshold',
                         '_wrap_callback',
                         'active_time',
                         'close',
                         'closed',
                         'inactive_time',
                         'is_active',
                         'line_detected',
                         'partial',
                         'pin',
                         'pin_factory',
                         'pull_up',
                         'queue_len',
                         'threshold',
                         'value',
                         'values',
                         'wait_for_active',
                         'wait_for_inactive',
                         'wait_for_line',
                         'wait_for_no_line',
                         'when_activated',
                         'when_deactivated',
                         'when_line',
                         'when_no_line'}),
 '_active_event': <threading.Event object at 0x10cc78af0>,
 '_active_state': True,
 '_inactive_event': <threading.Event object at 0x10cc78130>,
 '_inactive_state': False,
 '_last_active': None,
 '_last_changed': 3.237880471,
 '_pin': GPIO5,
 '_queue': <GPIOQueue(Thread-2, started daemon 123145516498944)>,
 '_threshold': 0.5,
 'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10c305df0>}
2022-06-13 08:42:31 INFO devices.test Testing rightbutton
2022-06-13 08:42:31 INFO devices.sense_off 5 is ON
2022-06-13 08:42:31 INFO devices.sense_off Event OFF for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:42:33 INFO devices.sense_on 5 is ON
2022-06-13 08:42:33 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:43:55 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:43:55 INFO logging.__new__ Created Logger singleton ID 4415729568
2022-06-13 08:43:55 INFO configuration.__new__ backlog: Created Configuration singleton ID 4415011520
2022-06-13 08:43:55 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:43:55 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:43:55 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:43:55 INFO state.__new__ Created StateMachine singleton ID 4415729568
2022-06-13 08:43:55 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:43:55 INFO system.__new__ Created System singleton ID 4415729568
2022-06-13 08:43:55 INFO system.build Configuring 2 devices:
2022-06-13 08:43:55 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:43:55 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:43:55 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:43:55 INFO system.build Commissioned Switch leftbutton ID 4409994880 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:43:55 INFO system.build 


Driver consists of {'__attrs__': frozenset({'__class__',
                         '__del__',
                         '__delattr__',
                         '__dict__',
                         '__dir__',
                         '__doc__',
                         '__enter__',
                         '__eq__',
                         '__exit__',
                         '__format__',
                         '__ge__',
                         '__getattribute__',
                         '__gt__',
                         '__hash__',
                         '__init__',
                         '__init_subclass__',
                         '__le__',
                         '__lt__',
                         '__module__',
                         '__ne__',
                         '__new__',
                         '__reduce__',
                         '__reduce_ex__',
                         '__repr__',
                         '__setattr__',
                         '__sizeof__',
                         '__str__',
                         '__subclasshook__',
                         '__weakref__',
                         '_active_event',
                         '_active_state',
                         '_all_events',
                         '_check_open',
                         '_conflicts_with',
                         '_default_pin_factory',
                         '_fire_activated',
                         '_fire_deactivated',
                         '_fire_events',
                         '_inactive_event',
                         '_inactive_state',
                         '_last_active',
                         '_last_changed',
                         '_pin',
                         '_queue',
                         '_read',
                         '_start_stop_events',
                         '_state_to_value',
                         '_threshold',
                         '_wrap_callback',
                         'active_time',
                         'close',
                         'closed',
                         'inactive_time',
                         'is_active',
                         'line_detected',
                         'partial',
                         'pin',
                         'pin_factory',
                         'pull_up',
                         'queue_len',
                         'threshold',
                         'value',
                         'values',
                         'wait_for_active',
                         'wait_for_inactive',
                         'wait_for_line',
                         'wait_for_no_line',
                         'when_activated',
                         'when_deactivated',
                         'when_line',
                         'when_no_line'}),
 '_active_event': <threading.Event object at 0x107bee3d0>,
 '_active_state': True,
 '_inactive_event': <threading.Event object at 0x107bee7f0>,
 '_inactive_state': False,
 '_last_active': None,
 '_last_changed': 0.210662465,
 '_pin': GPIO6,
 '_queue': <GPIOQueue(Thread-1, started daemon 123145380528128)>,
 '_threshold': 0.5,
 'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10727bdf0>}
2022-06-13 08:43:55 INFO devices.test Testing leftbutton
2022-06-13 08:43:58 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:43:58 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:43:58 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:43:58 INFO system.build Commissioned Switch rightbutton ID 4415848656 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:43:58 INFO system.build 


Driver consists of {'__attrs__': frozenset({'__class__',
                         '__del__',
                         '__delattr__',
                         '__dict__',
                         '__dir__',
                         '__doc__',
                         '__enter__',
                         '__eq__',
                         '__exit__',
                         '__format__',
                         '__ge__',
                         '__getattribute__',
                         '__gt__',
                         '__hash__',
                         '__init__',
                         '__init_subclass__',
                         '__le__',
                         '__lt__',
                         '__module__',
                         '__ne__',
                         '__new__',
                         '__reduce__',
                         '__reduce_ex__',
                         '__repr__',
                         '__setattr__',
                         '__sizeof__',
                         '__str__',
                         '__subclasshook__',
                         '__weakref__',
                         '_active_event',
                         '_active_state',
                         '_all_events',
                         '_check_open',
                         '_conflicts_with',
                         '_default_pin_factory',
                         '_fire_activated',
                         '_fire_deactivated',
                         '_fire_events',
                         '_inactive_event',
                         '_inactive_state',
                         '_last_active',
                         '_last_changed',
                         '_pin',
                         '_queue',
                         '_read',
                         '_start_stop_events',
                         '_state_to_value',
                         '_threshold',
                         '_wrap_callback',
                         'active_time',
                         'close',
                         'closed',
                         'inactive_time',
                         'is_active',
                         'line_detected',
                         'partial',
                         'pin',
                         'pin_factory',
                         'pull_up',
                         'queue_len',
                         'threshold',
                         'value',
                         'values',
                         'wait_for_active',
                         'wait_for_inactive',
                         'wait_for_line',
                         'wait_for_no_line',
                         'when_activated',
                         'when_deactivated',
                         'when_line',
                         'when_no_line'}),
 '_active_event': <threading.Event object at 0x107bac6a0>,
 '_active_state': True,
 '_inactive_event': <threading.Event object at 0x107bac520>,
 '_inactive_state': False,
 '_last_active': None,
 '_last_changed': 3.228425147,
 '_pin': GPIO5,
 '_queue': <GPIOQueue(Thread-2, started daemon 123145380528128)>,
 '_threshold': 0.5,
 'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x10727bdf0>}
2022-06-13 08:43:58 INFO devices.test Testing rightbutton
2022-06-13 08:44:41 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:44:41 INFO logging.__new__ Created Logger singleton ID 4310720416
2022-06-13 08:44:41 INFO configuration.__new__ backlog: Created Configuration singleton ID 4309994176
2022-06-13 08:44:41 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:44:41 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:44:41 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:44:42 INFO state.__new__ Created StateMachine singleton ID 4310720416
2022-06-13 08:44:42 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:44:42 INFO system.__new__ Created System singleton ID 4310720416
2022-06-13 08:44:42 INFO system.build Configuring 2 devices:
2022-06-13 08:44:42 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:44:42 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:44:42 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:44:42 INFO system.build Commissioned Switch leftbutton ID 4304981632 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:44:42 INFO system.build 


Driver consists of {'__attrs__': frozenset({'__class__',
                         '__del__',
                         '__delattr__',
                         '__dict__',
                         '__dir__',
                         '__doc__',
                         '__enter__',
                         '__eq__',
                         '__exit__',
                         '__format__',
                         '__ge__',
                         '__getattribute__',
                         '__gt__',
                         '__hash__',
                         '__init__',
                         '__init_subclass__',
                         '__le__',
                         '__lt__',
                         '__module__',
                         '__ne__',
                         '__new__',
                         '__reduce__',
                         '__reduce_ex__',
                         '__repr__',
                         '__setattr__',
                         '__sizeof__',
                         '__str__',
                         '__subclasshook__',
                         '__weakref__',
                         '_active_event',
                         '_active_state',
                         '_all_events',
                         '_check_open',
                         '_conflicts_with',
                         '_default_pin_factory',
                         '_fire_activated',
                         '_fire_deactivated',
                         '_fire_events',
                         '_inactive_event',
                         '_inactive_state',
                         '_last_active',
                         '_last_changed',
                         '_pin',
                         '_queue',
                         '_read',
                         '_start_stop_events',
                         '_state_to_value',
                         '_threshold',
                         '_wrap_callback',
                         'active_time',
                         'close',
                         'closed',
                         'inactive_time',
                         'is_active',
                         'line_detected',
                         'partial',
                         'pin',
                         'pin_factory',
                         'pull_up',
                         'queue_len',
                         'threshold',
                         'value',
                         'values',
                         'wait_for_active',
                         'wait_for_inactive',
                         'wait_for_line',
                         'wait_for_no_line',
                         'when_activated',
                         'when_deactivated',
                         'when_line',
                         'when_no_line'}),
 '_active_event': <threading.Event object at 0x1017c83d0>,
 '_active_state': True,
 '_inactive_event': <threading.Event object at 0x1017c87f0>,
 '_inactive_state': False,
 '_last_active': None,
 '_last_changed': 0.215942374,
 '_pin': GPIO6,
 '_queue': <GPIOQueue(Thread-1, started daemon 123145394364416)>,
 '_threshold': 0.5,
 'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x100e54df0>}
2022-06-13 08:44:42 INFO devices.test Testing leftbutton
2022-06-13 08:44:45 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:44:45 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:44:45 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:44:45 INFO system.build Commissioned Switch rightbutton ID 4310835408 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:44:45 INFO system.build 


Driver consists of {'__attrs__': frozenset({'__class__',
                         '__del__',
                         '__delattr__',
                         '__dict__',
                         '__dir__',
                         '__doc__',
                         '__enter__',
                         '__eq__',
                         '__exit__',
                         '__format__',
                         '__ge__',
                         '__getattribute__',
                         '__gt__',
                         '__hash__',
                         '__init__',
                         '__init_subclass__',
                         '__le__',
                         '__lt__',
                         '__module__',
                         '__ne__',
                         '__new__',
                         '__reduce__',
                         '__reduce_ex__',
                         '__repr__',
                         '__setattr__',
                         '__sizeof__',
                         '__str__',
                         '__subclasshook__',
                         '__weakref__',
                         '_active_event',
                         '_active_state',
                         '_all_events',
                         '_check_open',
                         '_conflicts_with',
                         '_default_pin_factory',
                         '_fire_activated',
                         '_fire_deactivated',
                         '_fire_events',
                         '_inactive_event',
                         '_inactive_state',
                         '_last_active',
                         '_last_changed',
                         '_pin',
                         '_queue',
                         '_read',
                         '_start_stop_events',
                         '_state_to_value',
                         '_threshold',
                         '_wrap_callback',
                         'active_time',
                         'close',
                         'closed',
                         'inactive_time',
                         'is_active',
                         'line_detected',
                         'partial',
                         'pin',
                         'pin_factory',
                         'pull_up',
                         'queue_len',
                         'threshold',
                         'value',
                         'values',
                         'wait_for_active',
                         'wait_for_inactive',
                         'wait_for_line',
                         'wait_for_no_line',
                         'when_activated',
                         'when_deactivated',
                         'when_line',
                         'when_no_line'}),
 '_active_event': <threading.Event object at 0x1017c8130>,
 '_active_state': True,
 '_inactive_event': <threading.Event object at 0x1017c8f40>,
 '_inactive_state': False,
 '_last_active': None,
 '_last_changed': 3.238867975,
 '_pin': GPIO5,
 '_queue': <GPIOQueue(Thread-2, started daemon 123145394364416)>,
 '_threshold': 0.5,
 'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x100e54df0>}
2022-06-13 08:44:45 INFO devices.test Testing rightbutton
2022-06-13 08:45:37 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:45:37 INFO logging.__new__ Created Logger singleton ID 4457918368
2022-06-13 08:45:37 INFO configuration.__new__ backlog: Created Configuration singleton ID 4457196224
2022-06-13 08:45:37 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:45:37 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:45:37 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:45:37 INFO state.__new__ Created StateMachine singleton ID 4457918368
2022-06-13 08:45:37 INFO sqlite_event_handler.__init__ CREATE TABLE IF NOT EXISTS event (asctime TEXT, device TEXT, name TEXT, pin TEXT, state TEXT);
2022-06-13 08:45:37 INFO system.__new__ Created System singleton ID 4457918368
2022-06-13 08:45:37 INFO system.build Configuring 2 devices:
2022-06-13 08:45:37 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'leftbutton', 'gpio': 6}
2022-06-13 08:45:37 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:45:37 INFO devices.__init__ Driver leftbutton is: <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:45:37 INFO system.build Commissioned Switch leftbutton ID 4452183680 using driver <gpiozero.LineSensor object on pin GPIO6, pull_up=False>
2022-06-13 08:45:37 INFO system.build 


Driver consists of {'__attrs__': frozenset({'__class__',
                         '__del__',
                         '__delattr__',
                         '__dict__',
                         '__dir__',
                         '__doc__',
                         '__enter__',
                         '__eq__',
                         '__exit__',
                         '__format__',
                         '__ge__',
                         '__getattribute__',
                         '__gt__',
                         '__hash__',
                         '__init__',
                         '__init_subclass__',
                         '__le__',
                         '__lt__',
                         '__module__',
                         '__ne__',
                         '__new__',
                         '__reduce__',
                         '__reduce_ex__',
                         '__repr__',
                         '__setattr__',
                         '__sizeof__',
                         '__str__',
                         '__subclasshook__',
                         '__weakref__',
                         '_active_event',
                         '_active_state',
                         '_all_events',
                         '_check_open',
                         '_conflicts_with',
                         '_default_pin_factory',
                         '_fire_activated',
                         '_fire_deactivated',
                         '_fire_events',
                         '_inactive_event',
                         '_inactive_state',
                         '_last_active',
                         '_last_changed',
                         '_pin',
                         '_queue',
                         '_read',
                         '_start_stop_events',
                         '_state_to_value',
                         '_threshold',
                         '_wrap_callback',
                         'active_time',
                         'close',
                         'closed',
                         'inactive_time',
                         'is_active',
                         'line_detected',
                         'partial',
                         'pin',
                         'pin_factory',
                         'pull_up',
                         'queue_len',
                         'threshold',
                         'value',
                         'values',
                         'wait_for_active',
                         'wait_for_inactive',
                         'wait_for_line',
                         'wait_for_no_line',
                         'when_activated',
                         'when_deactivated',
                         'when_line',
                         'when_no_line'}),
 '_active_event': <threading.Event object at 0x10a42a3d0>,
 '_active_state': True,
 '_inactive_event': <threading.Event object at 0x10a42a7f0>,
 '_inactive_state': False,
 '_last_active': None,
 '_last_changed': 0.222820572,
 '_pin': GPIO6,
 '_queue': <GPIOQueue(Thread-1, started daemon 123145567510528)>,
 '_threshold': 0.5,
 'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x109ab6df0>}
2022-06-13 08:45:37 INFO devices.test Testing leftbutton
2022-06-13 08:45:37 INFO devices.sense_off GPIO6 is ON
2022-06-13 08:45:37 INFO devices.sense_off Event OFF for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:45:39 INFO devices.sense_on GPIO6 is ON
2022-06-13 08:45:39 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 6, 'name': 'leftbutton'}
2022-06-13 08:45:40 INFO devices.__init__ Building device {'device_type': 'switch', 'name': 'rightbutton', 'gpio': 5}
2022-06-13 08:45:40 INFO devices.__init__ Switch driver is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:45:40 INFO devices.__init__ Driver rightbutton is: <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:45:40 INFO system.build Commissioned Switch rightbutton ID 4458040720 using driver <gpiozero.LineSensor object on pin GPIO5, pull_up=False>
2022-06-13 08:45:40 INFO system.build 


Driver consists of {'__attrs__': frozenset({'__class__',
                         '__del__',
                         '__delattr__',
                         '__dict__',
                         '__dir__',
                         '__doc__',
                         '__enter__',
                         '__eq__',
                         '__exit__',
                         '__format__',
                         '__ge__',
                         '__getattribute__',
                         '__gt__',
                         '__hash__',
                         '__init__',
                         '__init_subclass__',
                         '__le__',
                         '__lt__',
                         '__module__',
                         '__ne__',
                         '__new__',
                         '__reduce__',
                         '__reduce_ex__',
                         '__repr__',
                         '__setattr__',
                         '__sizeof__',
                         '__str__',
                         '__subclasshook__',
                         '__weakref__',
                         '_active_event',
                         '_active_state',
                         '_all_events',
                         '_check_open',
                         '_conflicts_with',
                         '_default_pin_factory',
                         '_fire_activated',
                         '_fire_deactivated',
                         '_fire_events',
                         '_inactive_event',
                         '_inactive_state',
                         '_last_active',
                         '_last_changed',
                         '_pin',
                         '_queue',
                         '_read',
                         '_start_stop_events',
                         '_state_to_value',
                         '_threshold',
                         '_wrap_callback',
                         'active_time',
                         'close',
                         'closed',
                         'inactive_time',
                         'is_active',
                         'line_detected',
                         'partial',
                         'pin',
                         'pin_factory',
                         'pull_up',
                         'queue_len',
                         'threshold',
                         'value',
                         'values',
                         'wait_for_active',
                         'wait_for_inactive',
                         'wait_for_line',
                         'wait_for_no_line',
                         'when_activated',
                         'when_deactivated',
                         'when_line',
                         'when_no_line'}),
 '_active_event': <threading.Event object at 0x10a42a5e0>,
 '_active_state': True,
 '_inactive_event': <threading.Event object at 0x10a42aee0>,
 '_inactive_state': False,
 '_last_active': None,
 '_last_changed': 3.242637281,
 '_pin': GPIO5,
 '_queue': <GPIOQueue(Thread-2, started daemon 123145584300032)>,
 '_threshold': 0.5,
 'pin_factory': <gpiozero.pins.mock.MockFactory object at 0x109ab6df0>}
2022-06-13 08:45:40 INFO devices.test Testing rightbutton
2022-06-13 08:45:40 INFO devices.sense_off GPIO5 is ON
2022-06-13 08:45:40 INFO devices.sense_off Event OFF for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:45:42 INFO devices.sense_on GPIO5 is ON
2022-06-13 08:45:42 INFO devices.sense_on Event ON  for {'device_type': 'switch', 'gpio': 5, 'name': 'rightbutton'}
2022-06-13 08:57:09 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:57:09 INFO logging.__new__ Created Logger singleton ID 4338065312
2022-06-13 08:57:09 INFO configuration.__new__ backlog: Created Configuration singleton ID 4337343216
2022-06-13 08:57:09 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:57:37 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:57:37 INFO logging.__new__ Created Logger singleton ID 4467589024
2022-06-13 08:57:37 INFO configuration.__new__ backlog: Created Configuration singleton ID 4466862832
2022-06-13 08:57:37 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:57:37 INFO state.__new__ Created StateMachine singleton ID 4467589024
2022-06-13 08:57:37 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:57:37 WARNING devices.<module> Backfilling with Mock pin factory
2022-06-13 08:58:46 INFO logging.__new__ -------- NoiseBin --------
2022-06-13 08:58:46 INFO logging.__new__ Created Logger singleton ID 4515626912
2022-06-13 08:58:46 INFO configuration.__new__ backlog: Created Configuration singleton ID 4514904816
2022-06-13 08:58:46 INFO configuration.__new__ Loaded configuration from config.json
2022-06-13 08:58:47 INFO state.__new__ Created StateMachine singleton ID 4515626912
2022-06-13 08:58:47 INFO devices.<module> Logging is on, console output is: False
2022-06-13 08:58:47 WARNING devices.<module> Backfilling with Mock pin factory
